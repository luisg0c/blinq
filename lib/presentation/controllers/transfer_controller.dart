// lib/presentation/controllers/transfer_controller.dart - CORRE√á√ÉO PARA VALIDA√á√ÉO DE VALOR

import 'package:get/get.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import '../../core/exceptions/app_exception.dart';
import '../../domain/usecases/transfer_usecase.dart';
import '../../core/theme/app_colors.dart';
import '../../routes/app_routes.dart';
import '../../core/services/notification_service.dart';
import '../../core/utils/money_input_formatter.dart';

/// ‚úÖ CONTROLLER CORRIGIDO PARA TRANSFER√äNCIAS
class TransferController extends GetxController {
  final TransferUseCase _transferUseCase;

  TransferController({required TransferUseCase transferUseCase})
      : _transferUseCase = transferUseCase;

  // ‚úÖ OBSERVABLES DE ESTADO
  final RxBool isLoading = false.obs;
  final RxnString errorMessage = RxnString();
  final RxnString successMessage = RxnString();
  
  // ‚úÖ DADOS DA TRANSFER√äNCIA
  final RxString recipientEmail = ''.obs;
  final RxDouble amount = 0.0.obs;
  final RxString description = ''.obs;
  final RxnString recipientName = RxnString();
  final RxnString recipientId = RxnString();

  // ‚úÖ CONTROLE DE TENTATIVAS E FEEDBACK
  final RxInt attemptCount = 0.obs;
  final RxBool isRetrying = false.obs;
  final RxDouble transferProgress = 0.0.obs;

  @override
  void onInit() {
    super.onInit();
    print('üîß TransferController inicializado');
  }

  @override
  void onClose() {
    _clearSensitiveData();
    super.dispose();
  }

  /// ‚úÖ CONFIGURAR DADOS DA TRANSFER√äNCIA COM VALIDA√á√ÉO CORRIGIDA
  void setTransferData({
    required String email,
    required double value,
    String? desc,
    String? recipientUserName,
    String? recipientUserId,
  }) {
    try {
      print('üìù Configurando dados da transfer√™ncia...');
      print('   Email: $email');
      print('   Valor recebido: $value');
      print('   Tipo do valor: ${value.runtimeType}');
      
      // ‚úÖ VALIDA√á√ïES B√ÅSICAS CORRIGIDAS
      if (email.trim().isEmpty) {
        throw const AppException('Email do destinat√°rio √© obrigat√≥rio');
      }
      
      // ‚úÖ VALIDA√á√ÉO DE VALOR MAIS ROBUSTA
      if (value.isNaN || value.isInfinite) {
        throw const AppException('Valor inv√°lido fornecido');
      }
      
      if (value <= 0.0) {
        print('‚ùå Valor inv√°lido: $value (deve ser > 0)');
        throw AppException('Valor deve ser maior que zero. Recebido: $value');
      }
      
      if (value > 50000.0) {
        throw const AppException('Valor m√°ximo por transfer√™ncia: R\$ 50.000,00');
      }
      
      if (value < 0.01) {
        throw const AppException('Valor m√≠nimo para transfer√™ncia: R\$ 0,01');
      }

      // Verificar se n√£o √© auto-transfer√™ncia
      final currentUser = FirebaseAuth.instance.currentUser;
      if (currentUser?.email?.toLowerCase() == email.toLowerCase()) {
        throw const AppException('Voc√™ n√£o pode transferir para si mesmo');
      }

      // ‚úÖ CONFIGURAR DADOS (GARANTIR PRECIS√ÉO)
      recipientEmail.value = email.trim().toLowerCase();
      amount.value = double.parse(value.toStringAsFixed(2)); // Garantir 2 casas decimais
      description.value = desc?.trim() ?? 'Transfer√™ncia PIX';
      recipientName.value = recipientUserName;
      recipientId.value = recipientUserId;

      // Limpar estados anteriores
      errorMessage.value = null;
      successMessage.value = null;
      attemptCount.value = 0;
      transferProgress.value = 0.0;

      print('‚úÖ Dados configurados com sucesso:');
      print('   Destinat√°rio: ${recipientEmail.value}');
      print('   Valor final: ${amount.value}');
      print('   Valor formatado: R\$ ${amount.value.toStringAsFixed(2)}');
      print('   Descri√ß√£o: ${description.value}');

    } catch (e) {
      print('‚ùå Erro ao configurar dados: $e');
      errorMessage.value = e.toString().replaceAll('AppException: ', '');
      _showErrorFeedback(errorMessage.value!);
    }
  }

  /// ‚úÖ EXECUTAR TRANSFER√äNCIA COM VALIDA√á√ÉO DUPLA
  Future<void> executeTransfer() async {
    if (isLoading.value) {
      print('‚ö†Ô∏è Transfer√™ncia j√° em andamento');
      return;
    }

    print('üí∏ Iniciando execu√ß√£o da transfer√™ncia...');
    print('   Valor atual: ${amount.value}');
    print('   Email: ${recipientEmail.value}');
    
    // ‚úÖ VALIDAR DADOS ANTES DE EXECUTAR
    if (!_validateTransferData()) {
      print('‚ùå Dados da transfer√™ncia inv√°lidos');
      return;
    }

    isLoading.value = true;
    errorMessage.value = null;
    transferProgress.value = 0.1;

    try {
      final currentUser = FirebaseAuth.instance.currentUser;
      if (currentUser == null) {
        throw const AppException('Usu√°rio n√£o autenticado');
      }

      attemptCount.value++;
      print('üîÑ Tentativa ${attemptCount.value}/3');

      // ‚úÖ VALIDA√á√ÉO ADICIONAL ANTES DE CHAMAR USE CASE
      final transferAmount = amount.value;
      final transferEmail = recipientEmail.value;
      final transferDescription = description.value;

      print('üîç Valida√ß√£o final antes do UseCase:');
      print('   Valor: $transferAmount (${transferAmount.runtimeType})');
      print('   Email: $transferEmail');
      print('   Descri√ß√£o: $transferDescription');

      if (transferAmount <= 0) {
        throw AppException('Erro cr√≠tico: valor ${transferAmount} n√£o √© v√°lido');
      }

      // Simular progresso da opera√ß√£o
      await _updateProgress();

      // ‚úÖ EXECUTAR TRANSFER√äNCIA VIA USE CASE COM VALORES VALIDADOS
      await _transferUseCase.execute(
        senderId: currentUser.uid,
        receiverEmail: transferEmail,
        amount: transferAmount,
        description: transferDescription,
      );

      transferProgress.value = 1.0;

      // ‚úÖ SUCESSO
      await _handleTransferSuccess();

    } on AppException catch (e) {
      print('‚ùå Erro de neg√≥cio: ${e.message}');
      transferProgress.value = 0.0;
      errorMessage.value = e.message;
      
      await _handleTransferError(e);

    } catch (e) {
      print('‚ùå Erro t√©cnico: $e');
      transferProgress.value = 0.0;
      
      final errorMsg = _formatTechnicalError(e);
      errorMessage.value = errorMsg;
      
      await _handleTransferError(AppException(errorMsg));

    } finally {
      isLoading.value = false;
      isRetrying.value = false;
    }
  }

  /// ‚úÖ VALIDAR DADOS DA TRANSFER√äNCIA COM LOG DETALHADO
  bool _validateTransferData() {
    print('üîç Validando dados da transfer√™ncia...');

    if (recipientEmail.value.trim().isEmpty) {
      errorMessage.value = 'Email do destinat√°rio √© obrigat√≥rio';
      print('‚ùå Email vazio');
      _showErrorFeedback(errorMessage.value!);
      return false;
    }

    print('‚úÖ Email v√°lido: ${recipientEmail.value}');

    // ‚úÖ VALIDA√á√ÉO ROBUSTA DO VALOR
    final currentAmount = amount.value;
    print('üîç Validando valor: $currentAmount (${currentAmount.runtimeType})');

    if (currentAmount.isNaN) {
      errorMessage.value = 'Valor √© NaN (n√£o √© um n√∫mero)';
      print('‚ùå Valor √© NaN');
      _showErrorFeedback(errorMessage.value!);
      return false;
    }

    if (currentAmount.isInfinite) {
      errorMessage.value = 'Valor √© infinito';
      print('‚ùå Valor √© infinito');
      _showErrorFeedback(errorMessage.value!);
      return false;
    }

    if (currentAmount <= 0.0) {
      errorMessage.value = 'Valor deve ser maior que zero (atual: $currentAmount)';
      print('‚ùå Valor <= 0: $currentAmount');
      _showErrorFeedback(errorMessage.value!);
      return false;
    }

    if (currentAmount > 50000.0) {
      errorMessage.value = 'Valor m√°ximo por transfer√™ncia: R\$ 50.000,00';
      print('‚ùå Valor muito alto: $currentAmount');
      _showErrorFeedback(errorMessage.value!);
      return false;
    }

    if (currentAmount < 0.01) {
      errorMessage.value = 'Valor m√≠nimo para transfer√™ncia: R\$ 0,01';
      print('‚ùå Valor muito baixo: $currentAmount');
      _showErrorFeedback(errorMessage.value!);
      return false;
    }

    print('‚úÖ Valor v√°lido: R\$ ${currentAmount.toStringAsFixed(2)}');

    final currentUser = FirebaseAuth.instance.currentUser;
    if (currentUser == null) {
      errorMessage.value = 'Usu√°rio n√£o autenticado';
      print('‚ùå Usu√°rio n√£o autenticado');
      _showErrorFeedback(errorMessage.value!);
      return false;
    }

    print('‚úÖ Usu√°rio autenticado: ${currentUser.email}');
    print('‚úÖ Todos os dados validados com sucesso');

    return true;
  }

  /// ‚úÖ M√âTODO PARA CONVERTER VALOR DE TEXTO (USADO EM PIN VERIFICATION)
  void setTransferDataFromArguments(Map<String, dynamic> args) {
    try {
      print('üì• Configurando transfer√™ncia a partir de argumentos: $args');

      final email = args['recipient']?.toString() ?? '';
      final amountValue = args['amount'];
      final desc = args['description']?.toString();
      final recipientUserName = args['recipientName']?.toString();
      final recipientUserId = args['recipientId']?.toString();

      print('üîç Processando valor dos argumentos:');
      print('   Valor bruto: $amountValue (${amountValue.runtimeType})');

      double finalAmount;

      // ‚úÖ CONVERS√ÉO ROBUSTA DO VALOR
      if (amountValue is double) {
        finalAmount = amountValue;
        print('   ‚úÖ Valor j√° √© double: $finalAmount');
      } else if (amountValue is int) {
        finalAmount = amountValue.toDouble();
        print('   ‚úÖ Valor convertido de int: $finalAmount');
      } else if (amountValue is String) {
        finalAmount = MoneyInputFormatter.parseAmount(amountValue);
        print('   ‚úÖ Valor parseado de string: "$amountValue" -> $finalAmount');
      } else {
        print('   ‚ùå Tipo de valor n√£o suportado: ${amountValue.runtimeType}');
        throw AppException('Tipo de valor inv√°lido: ${amountValue.runtimeType}');
      }

      // Usar o m√©todo principal para configurar os dados
      setTransferData(
        email: email,
        value: finalAmount,
        desc: desc,
        recipientUserName: recipientUserName,
        recipientUserId: recipientUserId,
      );

    } catch (e) {
      print('‚ùå Erro ao configurar dados dos argumentos: $e');
      errorMessage.value = 'Erro ao processar dados da transfer√™ncia: $e';
      _showErrorFeedback(errorMessage.value!);
    }
  }

  /// ‚úÖ SIMULAR PROGRESSO DA OPERA√á√ÉO
  Future<void> _updateProgress() async {
    transferProgress.value = 0.2;
    await Future.delayed(const Duration(milliseconds: 300));

    transferProgress.value = 0.4;
    await Future.delayed(const Duration(milliseconds: 300));

    transferProgress.value = 0.6;
    await Future.delayed(const Duration(milliseconds: 300));

    transferProgress.value = 0.8;
    await Future.delayed(const Duration(milliseconds: 300));
  }

  /// ‚úÖ LIDAR COM SUCESSO DA TRANSFER√äNCIA
  Future<void> _handleTransferSuccess() async {
    successMessage.value = 'Transfer√™ncia realizada com sucesso! üéâ';
    
    print('‚úÖ Transfer√™ncia executada com sucesso');
    print('   Para: ${recipientName.value ?? recipientEmail.value}');
    print('   Valor: R\$ ${amount.value.toStringAsFixed(2)}');

    // ‚úÖ CAPTURAR VALORES ANTES DE LIMPAR
    final transferAmount = amount.value;
    final recipientDisplayName = recipientName.value ?? recipientEmail.value;

    // ‚úÖ LIMPAR DADOS SENS√çVEIS
    _clearSensitiveData();

    // ‚úÖ NAVEGAR PARA HOME
    Get.offAllNamed(AppRoutes.home);

    // ‚úÖ MOSTRAR FEEDBACK AP√ìS NAVEGA√á√ÉO
    await Future.delayed(const Duration(milliseconds: 800));
    
    _showSuccessFeedback(
      'Transfer√™ncia Realizada! üí∏',
      'R\$ ${transferAmount.toStringAsFixed(2).replaceAll('.', ',')} enviados para $recipientDisplayName',
    );

    // ‚úÖ NOTIFICA√á√ÉO
    try {
      await NotificationService.sendTransferReceivedNotification(
        receiverUserId: recipientId.value ?? '',
        amount: transferAmount,
        senderName: FirebaseAuth.instance.currentUser?.displayName ?? 'Usu√°rio Blinq',
      );
    } catch (e) {
      print('‚ö†Ô∏è Falha ao enviar notifica√ß√£o: $e');
    }
  }

  /// ‚úÖ LIDAR COM ERRO DA TRANSFER√äNCIA
  Future<void> _handleTransferError(AppException exception) async {
    print('‚ùå Lidando com erro: ${exception.message}');

    final canRetry = _canRetryTransfer(exception);
    
    if (canRetry && attemptCount.value < 3) {
      _showRetryOption(exception);
    } else {
      _showFinalError(exception);
    }
  }

  /// ‚úÖ VERIFICAR SE ERRO PERMITE RETRY
  bool _canRetryTransfer(AppException exception) {
    final message = exception.message.toLowerCase();
    
    // Erros que permitem retry
    if (message.contains('conex√£o') ||
        message.contains('timeout') ||
        message.contains('temporariamente') ||
        message.contains('tempo limite') ||
        message.contains('indispon√≠vel')) {
      return true;
    }
    
    return false;
  }

  /// ‚úÖ MOSTRAR OP√á√ÉO DE RETRY
  void _showRetryOption(AppException exception) {
    Get.dialog(
      AlertDialog(
        title: const Row(
          children: [
            Icon(Icons.warning_amber, color: AppColors.warning),
            SizedBox(width: 8),
            Text('Erro na Transfer√™ncia'),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(exception.message),
            const SizedBox(height: 16),
            Text(
              'Tentativa ${attemptCount.value}/3',
              style: const TextStyle(
                fontWeight: FontWeight.w500,
                color: AppColors.warning,
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () {
              Get.back();
              _clearSensitiveData();
            },
            child: const Text('Cancelar'),
          ),
          ElevatedButton(
            onPressed: () {
              Get.back();
              retryTransfer();
            },
            style: ElevatedButton.styleFrom(backgroundColor: AppColors.primary),
            child: const Text('Tentar Novamente', style: TextStyle(color: Colors.white)),
          ),
        ],
      ),
      barrierDismissible: false,
    );
  }

  /// ‚úÖ MOSTRAR ERRO FINAL
  void _showFinalError(AppException exception) {
    _showErrorFeedback('Transfer√™ncia Falhou', exception.message);
  }

  /// ‚úÖ RETRY DA TRANSFER√äNCIA
  Future<void> retryTransfer() async {
    if (attemptCount.value >= 3) {
      _showErrorFeedback('Limite de tentativas atingido');
      return;
    }

    isRetrying.value = true;
    print('üîÑ Tentando transfer√™ncia novamente...');
    
    await Future.delayed(const Duration(seconds: 2));
    await executeTransfer();
  }

  /// ‚úÖ FORMATAR ERROS T√âCNICOS
  String _formatTechnicalError(dynamic error) {
    final errorStr = error.toString().toLowerCase();
    
    if (errorStr.contains('network') || errorStr.contains('connection')) {
      return 'Erro de conex√£o. Verifique sua internet.';
    }
    
    if (errorStr.contains('timeout') || errorStr.contains('deadline')) {
      return 'Tempo limite excedido. Tente novamente.';
    }
    
    if (errorStr.contains('permission')) {
      return 'Permiss√£o negada. Fa√ßa login novamente.';
    }
    
    if (errorStr.contains('unavailable')) {
      return 'Servi√ßo temporariamente indispon√≠vel.';
    }
    
    return 'Erro interno. Tente novamente mais tarde.';
  }

  /// ‚úÖ FEEDBACK VISUAL DE SUCESSO
  void _showSuccessFeedback(String title, [String? message]) {
    Get.snackbar(
      title,
      message ?? 'Opera√ß√£o realizada com sucesso',
      backgroundColor: AppColors.success,
      colorText: Colors.white,
      snackPosition: SnackPosition.BOTTOM,
      duration: const Duration(seconds: 4),
      margin: const EdgeInsets.all(16),
      borderRadius: 12,
      icon: const Icon(Icons.check_circle, color: Colors.white, size: 28),
    );
  }

  /// ‚úÖ FEEDBACK VISUAL DE ERRO
  void _showErrorFeedback(String title, [String? message]) {
    Get.snackbar(
      title,
      message ?? 'Ocorreu um erro na opera√ß√£o',
      backgroundColor: AppColors.error,
      colorText: Colors.white,
      snackPosition: SnackPosition.BOTTOM,
      duration: const Duration(seconds: 4),
      margin: const EdgeInsets.all(16),
      borderRadius: 12,
      icon: const Icon(Icons.error_outline, color: Colors.white, size: 28),
    );
  }

  /// ‚úÖ LIMPAR DADOS SENS√çVEIS
  void _clearSensitiveData() {
    recipientEmail.value = '';
    amount.value = 0.0;
    description.value = '';
    recipientName.value = null;
    recipientId.value = null;
    errorMessage.value = null;
    successMessage.value = null;
    attemptCount.value = 0;
    transferProgress.value = 0.0;
    
    print('üßπ Dados sens√≠veis limpos');
  }

  /// ‚úÖ LIMPAR APENAS MENSAGENS DE ERRO
  void clearError() {
    errorMessage.value = null;
  }

  /// ‚úÖ CANCELAR TRANSFER√äNCIA
  void cancelTransfer() {
    if (isLoading.value) {
      Get.dialog(
        AlertDialog(
          title: const Text('Cancelar Transfer√™ncia?'),
          content: const Text('A transfer√™ncia est√° sendo processada. Tem certeza que deseja cancelar?'),
          actions: [
            TextButton(
              onPressed: () => Get.back(),
              child: const Text('N√£o'),
            ),
            TextButton(
              onPressed: () {
                Get.back();
                _forceCancelTransfer();
              },
              child: const Text('Sim, Cancelar', style: TextStyle(color: AppColors.error)),
            ),
          ],
        ),
      );
    } else {
      _clearSensitiveData();
      Get.back();
    }
  }

  /// ‚úÖ FOR√áAR CANCELAMENTO
  void _forceCancelTransfer() {
    isLoading.value = false;
    isRetrying.value = false;
    _clearSensitiveData();
    
    Get.back();
    
    Get.snackbar(
      'Transfer√™ncia Cancelada',
      'A opera√ß√£o foi cancelada pelo usu√°rio',
      backgroundColor: AppColors.warning.withOpacity(0.1),
      colorText: AppColors.warning,
      snackPosition: SnackPosition.BOTTOM,
    );
  }

  /// ‚úÖ OBTER RESUMO DA TRANSFER√äNCIA
  Map<String, dynamic> getTransferSummary() {
    return {
      'recipient': recipientEmail.value,
      'recipientName': recipientName.value,
      'amount': amount.value,
      'formattedAmount': 'R\$ ${amount.value.toStringAsFixed(2).replaceAll('.', ',')}',
      'description': description.value,
      'isValid': _validateTransferData(),
      'isLoading': isLoading.value,
      'progress': transferProgress.value,
    };
  }

  /// ‚úÖ VERIFICAR SE H√Å DADOS V√ÅLIDOS
  bool get hasValidData => 
      recipientEmail.value.isNotEmpty && 
      amount.value > 0 && 
      amount.value <= 50000;

  /// ‚úÖ VERIFICAR SE PODE EXECUTAR TRANSFER√äNCIA
  bool get canExecuteTransfer => 
      hasValidData && 
      !isLoading.value && 
      errorMessage.value == null;

  /// ‚úÖ M√âTODO DEBUG PARA VERIFICAR ESTADO
  Map<String, dynamic> getDebugInfo() {
    return {
      'recipientEmail': recipientEmail.value,
      'amount': amount.value,
      'amountType': amount.value.runtimeType.toString(),
      'description': description.value,
      'recipientName': recipientName.value,
      'recipientId': recipientId.value,
      'isLoading': isLoading.value,
      'errorMessage': errorMessage.value,
      'hasValidData': hasValidData,
      'canExecuteTransfer': canExecuteTransfer,
    };
  }
}