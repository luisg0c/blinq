// lib/core/services/app_initializer.dart - VERS√ÉO CORRIGIDA

import 'package:firebase_auth/firebase_auth.dart';
import 'package:get/get.dart';
import '../../routes/app_routes.dart';
import 'user_session_manager.dart';
import 'dart:async';

class AppInitializer {
  static bool _isNavigationReady = false;
  static Timer? _navigationDelayTimer;
  
  /// ‚úÖ INICIALIZAR APP E DETERMINAR ROTA INICIAL
  static Future<void> initializeAndNavigate() async {
    try {
      print('üöÄ Inicializando aplica√ß√£o...');
      
      // 1. Aguardar um pouco para garantir que tudo est√° carregado
      await Future.delayed(const Duration(milliseconds: 2000));
      
      // 2. Marcar navega√ß√£o como pronta
      _isNavigationReady = true;
      
      // 3. Verificar se usu√°rio est√° logado
      final user = FirebaseAuth.instance.currentUser;
      
      if (user != null) {
        print('üë§ Usu√°rio logado: ${user.email}');
        
        // 4. Inicializar sess√£o do usu√°rio
        await UserSessionManager.initializeUserSession(user.uid);
        
        // 5. Navegar para home com verifica√ß√£o
        _safeNavigate(AppRoutes.home, offAll: true);
      } else {
        print('üë§ Usu√°rio n√£o logado');
        
        // 6. Limpar qualquer sess√£o anterior
        await UserSessionManager.clearAllUserData();
        
        // 7. Navegar para welcome com verifica√ß√£o
        _safeNavigate(AppRoutes.welcome, offAll: true);
      }
      
    } catch (e) {
      print('‚ùå Erro na inicializa√ß√£o: $e');
      
      // Em caso de erro, ir para welcome
      try {
        await UserSessionManager.clearAllUserData();
      } catch (clearError) {
        print('‚ùå Erro ao limpar dados: $clearError');
      }
      
      _safeNavigate(AppRoutes.welcome, offAll: true);
    }
  }
  
  /// ‚úÖ NAVEGA√á√ÉO SEGURA COM VERIFICA√á√ïES
  static void _safeNavigate(String route, {bool offAll = false}) {
    // Verificar se a navega√ß√£o est√° pronta
    if (!_isNavigationReady) {
      print('‚ö†Ô∏è Navega√ß√£o n√£o est√° pronta, agendando...');
      _scheduleNavigation(route, offAll: offAll);
      return;
    }
    
    // Verificar se o GetX est√° pronto
    if (!Get.isRegistered<GetMaterialController>()) {
      print('‚ö†Ô∏è GetX n√£o est√° pronto, agendando...');
      _scheduleNavigation(route, offAll: offAll);
      return;
    }
    
    // Verificar se j√° estamos na rota correta
    if (Get.currentRoute == route) {
      print('‚ÑπÔ∏è J√° estamos na rota: $route');
      return;
    }
    
    try {
      print('üß≠ Navegando para: $route');
      
      if (offAll) {
        Get.offAllNamed(route);
      } else {
        Get.toNamed(route);
      }
      
      print('‚úÖ Navega√ß√£o conclu√≠da: $route');
    } catch (e) {
      print('‚ùå Erro na navega√ß√£o: $e');
      _scheduleNavigation(route, offAll: offAll);
    }
  }
  
  /// ‚úÖ AGENDAR NAVEGA√á√ÉO PARA QUANDO ESTIVER PRONTO
  static void _scheduleNavigation(String route, {bool offAll = false}) {
    _navigationDelayTimer?.cancel();
    
    print('‚è∞ Agendando navega√ß√£o para: $route');
    
    _navigationDelayTimer = Timer.periodic(const Duration(milliseconds: 500), (timer) {
      // Verificar se o GetX est√° pronto
      if (Get.isRegistered<GetMaterialController>() && _isNavigationReady) {
        timer.cancel();
        
        try {
          print('üß≠ Executando navega√ß√£o agendada: $route');
          
          if (offAll) {
            Get.offAllNamed(route);
          } else {
            Get.toNamed(route);
          }
          
          print('‚úÖ Navega√ß√£o agendada conclu√≠da: $route');
        } catch (e) {
          print('‚ùå Erro na navega√ß√£o agendada: $e');
        }
      }
      
      // Timeout ap√≥s 10 segundos
      if (timer.tick > 20) {
        timer.cancel();
        print('‚è∞ Timeout na navega√ß√£o agendada para: $route');
      }
    });
  }
  
  /// ‚úÖ CONFIGURAR LISTENERS GLOBAIS (MELHORADO)
  static void setupGlobalListeners() {
    try {
      // Aguardar que o GetX esteja pronto antes de configurar listeners
      Timer(const Duration(milliseconds: 1000), () {
        _isNavigationReady = true;
        
        // Listener para mudan√ßas de autentica√ß√£o
        FirebaseAuth.instance.authStateChanges().listen((User? user) {
          _handleAuthStateChange(user);
        });
        
        print('üëÇ Listeners globais configurados');
      });
    } catch (e) {
      print('‚ùå Erro ao configurar listeners: $e');
    }
  }
  
  /// ‚úÖ LIDAR COM MUDAN√áAS DE AUTENTICA√á√ÉO (CORRIGIDO)
  static void _handleAuthStateChange(User? user) async {
    try {
      // Aguardar um pouco para evitar conflitos com navega√ß√£o
      await Future.delayed(const Duration(milliseconds: 500));
      
      if (user == null) {
        print('üë§ Usu√°rio deslogado');
        
        // Limpar sess√£o
        await UserSessionManager.clearAllUserData();
        
        // S√≥ navegar se n√£o estivermos em uma rota p√∫blica
        if (!_isOnPublicRoute()) {
          _safeNavigate(AppRoutes.welcome, offAll: true);
        }
      } else {
        print('üë§ Usu√°rio logado: ${user.email}');
        
        // Inicializar sess√£o
        await UserSessionManager.initializeUserSession(user.uid);
        
        // S√≥ navegar se n√£o estivermos na home e n√£o for rota p√∫blica
        if (Get.currentRoute != AppRoutes.home && !_isOnPublicRoute()) {
          _safeNavigate(AppRoutes.home, offAll: true);
        }
      }
    } catch (e) {
      print('‚ùå Erro ao lidar com mudan√ßa de autentica√ß√£o: $e');
    }
  }
  
  /// ‚úÖ VERIFICAR SE ESTAMOS EM UMA ROTA P√öBLICA
  static bool _isOnPublicRoute() {
    final publicRoutes = [
      AppRoutes.splash,
      AppRoutes.onboarding, 
      AppRoutes.welcome,
      AppRoutes.login,
      AppRoutes.signup,
      AppRoutes.resetPassword,
    ];
    
    return publicRoutes.contains(Get.currentRoute);
  }
  
  /// ‚úÖ INICIALIZA√á√ÉO ESPEC√çFICA PARA USU√ÅRIO LOGADO
  static Future<void> initializeForLoggedUser(String userId) async {
    try {
      print('üë§ Inicializando para usu√°rio logado: $userId');
      
      // Inicializar sess√£o
      await UserSessionManager.initializeUserSession(userId);
      
      // Aqui poder√≠amos inicializar outros servi√ßos espec√≠ficos do usu√°rio
      // Como notifica√ß√µes, sincroniza√ß√£o, etc.
      
      print('‚úÖ Inicializa√ß√£o para usu√°rio conclu√≠da');
    } catch (e) {
      print('‚ùå Erro na inicializa√ß√£o para usu√°rio: $e');
      rethrow;
    }
  }
  
  /// ‚úÖ LIMPAR DADOS DO USU√ÅRIO AO FAZER LOGOUT
  static Future<void> cleanupOnLogout() async {
    try {
      print('üßπ Limpando dados no logout...');
      
      // Limpar sess√£o
      await UserSessionManager.clearAllUserData();
      
      // Aqui poder√≠amos limpar outros dados/servi√ßos
      // Como cache, notifica√ß√µes locais, etc.
      
      print('‚úÖ Limpeza no logout conclu√≠da');
    } catch (e) {
      print('‚ùå Erro na limpeza do logout: $e');
    }
  }
  
  /// ‚úÖ VERIFICAR SA√öDE DA APLICA√á√ÉO
  static bool checkAppHealth() {
    try {
      // Verificar se o Firebase est√° funcionando
      final user = FirebaseAuth.instance.currentUser;
      
      // Verificar se o GetX est√° funcionando
      final routeIsValid = Get.currentRoute.isNotEmpty;
      final getxIsReady = Get.isRegistered<GetMaterialController>();
      
      // Verificar se a sess√£o est√° consistente (se h√° usu√°rio)
      bool sessionIsHealthy = true;
      if (user != null) {
        sessionIsHealthy = UserSessionManager.isSessionConsistent();
      }
      
      final isHealthy = routeIsValid && sessionIsHealthy && getxIsReady && _isNavigationReady;
      
      print('üè• Sa√∫de da app: $isHealthy');
      print('   Rota v√°lida: $routeIsValid');
      print('   GetX pronto: $getxIsReady');
      print('   Sess√£o saud√°vel: $sessionIsHealthy');
      print('   Navega√ß√£o pronta: $_isNavigationReady');
      
      return isHealthy;
    } catch (e) {
      print('‚ùå Erro ao verificar sa√∫de da app: $e');
      return false;
    }
  }
  
  /// ‚úÖ REPARAR PROBLEMAS DA APLICA√á√ÉO
  static Future<void> repairAppIfNeeded() async {
    try {
      print('üîß Verificando se app precisa de reparo...');
      
      if (!checkAppHealth()) {
        print('‚ö†Ô∏è App n√£o est√° saud√°vel, tentando reparar...');
        
        // Aguardar um pouco para garantir que GetX est√° est√°vel
        await Future.delayed(const Duration(milliseconds: 1000));
        
        // Reparar sess√£o se necess√°rio
        await UserSessionManager.repairSessionIfNeeded();
        
        // Reparar navega√ß√£o se necess√°rio
        if (Get.currentRoute.isEmpty) {
          await initializeAndNavigate();
        }
        
        print('‚úÖ Tentativa de reparo conclu√≠da');
      } else {
        print('‚úÖ App est√° saud√°vel');
      }
    } catch (e) {
      print('‚ùå Erro no reparo da app: $e');
    }
  }
  
  /// ‚úÖ INFORMA√á√ïES DE DEBUG
  static Map<String, dynamic> getDebugInfo() {
    final user = FirebaseAuth.instance.currentUser;
    
    return {
      'currentRoute': Get.currentRoute,
      'isOnPublicRoute': _isOnPublicRoute(),
      'hasFirebaseUser': user != null,
      'firebaseUserId': user?.uid,
      'firebaseUserEmail': user?.email,
      'sessionInfo': UserSessionManager.getSessionDebugInfo(),
      'appIsHealthy': checkAppHealth(),
      'isNavigationReady': _isNavigationReady,
      'getxIsReady': Get.isRegistered<GetMaterialController>(),
      'timestamp': DateTime.now().toIso8601String(),
    };
  }
  
  /// ‚úÖ INICIALIZA√á√ÉO COMPLETA COM VERIFICA√á√ïES
  static Future<void> completeInitialization() async {
    try {
      print('üîÑ Inicializa√ß√£o completa...');
      
      // 1. Configurar listeners globais
      setupGlobalListeners();
      
      // 2. Aguardar que tudo esteja pronto
      await Future.delayed(const Duration(milliseconds: 1500));
      
      // 3. Verificar e reparar se necess√°rio
      await repairAppIfNeeded();
      
      // 4. Inicializar e navegar
      await initializeAndNavigate();
      
      print('‚úÖ Inicializa√ß√£o completa conclu√≠da');
    } catch (e) {
      print('‚ùå Erro na inicializa√ß√£o completa: $e');
      
      // Fallback para rota segura
      _safeNavigate(AppRoutes.welcome, offAll: true);
    }
  }
  
  /// ‚úÖ FOR√áAR RESET COMPLETO
  static Future<void> forceReset() async {
    try {
      print('üîÑ For√ßando reset completo...');
      
      // Cancelar timers
      _navigationDelayTimer?.cancel();
      
      // Reset flags
      _isNavigationReady = false;
      
      // Limpar dados
      await UserSessionManager.clearAllUserData();
      
      // Aguardar
      await Future.delayed(const Duration(milliseconds: 1000));
      
      // Reinicializar
      await completeInitialization();
      
      print('‚úÖ Reset completo conclu√≠do');
    } catch (e) {
      print('‚ùå Erro no reset completo: $e');
    }
  }
  
  /// ‚úÖ VERIFICAR SE GETX EST√Å PRONTO
  static bool isGetXReady() {
    try {
      return Get.isRegistered<GetMaterialController>() && _isNavigationReady;
    } catch (e) {
      return false;
    }
  }
  
  /// ‚úÖ AGUARDAR GETX FICAR PRONTO
  static Future<void> waitForGetXReady({Duration timeout = const Duration(seconds: 10)}) async {
    final completer = Completer<void>();
    final timer = Timer.periodic(const Duration(milliseconds: 100), (timer) {
      if (isGetXReady()) {
        timer.cancel();
        completer.complete();
      }
    });
    
    // Timeout
    Timer(timeout, () {
      timer.cancel();
      if (!completer.isCompleted) {
        completer.complete();
      }
    });
    
    await completer.future;
  }
}