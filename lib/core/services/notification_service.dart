// lib/core/services/notification_service.dart

import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:get/get.dart';
import '../theme/app_colors.dart';
import 'package:flutter/material.dart';

class NotificationService {
  static final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;
  static final FlutterLocalNotificationsPlugin _localNotifications = 
      FlutterLocalNotificationsPlugin();
  
  static bool _isInitialized = false;

  /// Inicializar servi√ßo de notifica√ß√µes
  static Future<void> initialize() async {
    if (_isInitialized) {
      print('üîî NotificationService j√° foi inicializado');
      return;
    }

    print('üîî Inicializando NotificationService...');

    try {
      // 1. Solicitar permiss√µes
      await _requestPermissions();

      // 2. Configurar notifica√ß√µes locais
      await _initializeLocalNotifications();

      // 3. Configurar Firebase Messaging
      await _initializeFirebaseMessaging();

      // 4. Configurar handlers
      _setupMessageHandlers();

      // 5. ‚úÖ Verificar mensagem inicial (quando app √© aberto via notifica√ß√£o)
      await _handleInitialMessage();

      _isInitialized = true;
      print('‚úÖ NotificationService inicializado com sucesso');
    } catch (e) {
      print('‚ùå Erro ao inicializar NotificationService: $e');
    }
  }

  static Future<void> _requestPermissions() async {
    try {
      // Firebase Messaging permissions
      final settings = await _firebaseMessaging.requestPermission(
        alert: true,
        badge: true,
        sound: true,
        provisional: false,
        announcement: false,
        carPlay: false,
        criticalAlert: false,
      );

      print('üîî Permission status: ${settings.authorizationStatus}');
      
      if (settings.authorizationStatus == AuthorizationStatus.denied) {
        print('‚ö†Ô∏è Usu√°rio negou permiss√µes de notifica√ß√£o');
      }
    } catch (e) {
      print('‚ùå Erro ao solicitar permiss√µes: $e');
    }
  }

  static Future<void> _initializeLocalNotifications() async {
    try {
      const androidSettings = AndroidInitializationSettings('@mipmap/ic_launcher');
      const iosSettings = DarwinInitializationSettings(
        requestAlertPermission: false, // J√° solicitado pelo Firebase
        requestBadgePermission: false,
        requestSoundPermission: false,
      );

      const initSettings = InitializationSettings(
        android: androidSettings,
        iOS: iosSettings,
      );

      // ‚úÖ CORRE√á√ÉO: Verificar se initialized n√£o √© null antes de usar
      final bool initialized = await _localNotifications.initialize(
        initSettings,
        onDidReceiveNotificationResponse: _onNotificationTapped,
      ) ?? false; // ‚úÖ Usar ?? false para tratar null

      if (!initialized) {
        print('‚ö†Ô∏è Falha ao inicializar notifica√ß√µes locais');
        return;
      }

      // Canal Android para notifica√ß√µes de transfer√™ncia
      const androidChannel = AndroidNotificationChannel(
        'blinq_transfers',
        'Transfer√™ncias Blinq',
        description: 'Notifica√ß√µes de transfer√™ncias e dep√≥sitos',
        importance: Importance.high,
        playSound: true,
        enableVibration: true,
      );

      final androidPlugin = _localNotifications
          .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>();
      
      if (androidPlugin != null) {
        await androidPlugin.createNotificationChannel(androidChannel);
        print('üì± Canal Android criado: ${androidChannel.id}');
      }
    } catch (e) {
      print('‚ùå Erro ao inicializar notifica√ß√µes locais: $e');
    }
  }

  static Future<void> _initializeFirebaseMessaging() async {
    try {
      // Obter token FCM
      final token = await _firebaseMessaging.getToken();
      if (token != null) {
        print('üîë FCM Token: ${token.substring(0, 20)}...');
        // TODO: Salvar token no Firestore para notifica√ß√µes direcionadas
      } else {
        print('‚ö†Ô∏è N√£o foi poss√≠vel obter FCM token');
      }

      // Listener para refresh do token
      _firebaseMessaging.onTokenRefresh.listen((newToken) {
        print('üîÑ Token atualizado: ${newToken.substring(0, 20)}...');
        // TODO: Atualizar token no backend
      });

      // Configurar op√ß√µes de apresenta√ß√£o no foreground
      await _firebaseMessaging.setForegroundNotificationPresentationOptions(
        alert: true,
        badge: true,
        sound: true,
      );

    } catch (e) {
      print('‚ùå Erro ao configurar Firebase Messaging: $e');
    }
  }

  static void _setupMessageHandlers() {
    try {
      // App em foreground
      FirebaseMessaging.onMessage.listen(_handleForegroundMessage);

      // App em background (clique na notifica√ß√£o abre o app)
      FirebaseMessaging.onMessageOpenedApp.listen(_handleMessageOpenedApp);

      print('üîß Message handlers configurados');
    } catch (e) {
      print('‚ùå Erro ao configurar handlers: $e');
    }
  }

  // ‚úÖ M√©todo separado para lidar com mensagem inicial
  static Future<void> _handleInitialMessage() async {
    try {
      // Verificar se o app foi aberto atrav√©s de uma notifica√ß√£o
      final RemoteMessage? initialMessage = await _firebaseMessaging.getInitialMessage();
      
      if (initialMessage != null) {
        print('üöÄ App iniciado via notifica√ß√£o: ${initialMessage.notification?.title}');
        
        // Aguardar um pouco para garantir que o GetX est√° pronto
        await Future.delayed(const Duration(milliseconds: 1000));
        
        // Processar a mensagem inicial
        _handleMessageOpenedApp(initialMessage);
      } else {
        print('üöÄ App iniciado normalmente (n√£o via notifica√ß√£o)');
      }
    } catch (e) {
      print('‚ùå Erro ao verificar mensagem inicial: $e');
    }
  }

  static Future<void> _handleForegroundMessage(RemoteMessage message) async {
    print('üí¨ Mensagem recebida em foreground: ${message.notification?.title}');

    try {
      // Mostrar notifica√ß√£o local quando app est√° aberto
      await _showLocalNotification(
        title: message.notification?.title ?? 'Blinq',
        body: message.notification?.body ?? 'Nova notifica√ß√£o',
        data: message.data,
      );
    } catch (e) {
      print('‚ùå Erro ao processar mensagem em foreground: $e');
    }
  }

  static void _handleMessageOpenedApp(RemoteMessage message) {
    print('üì± App aberto via notifica√ß√£o: ${message.data}');

    try {
      final type = message.data['type'] ?? '';
      
      // ‚úÖ Verificar se GetX est√° inicializado antes de navegar
      if (Get.currentRoute.isEmpty) {
        print('‚ö†Ô∏è GetX ainda n√£o est√° pronto, agendando navega√ß√£o...');
        
        // Aguardar GetX estar pronto
        Future.delayed(const Duration(milliseconds: 2000), () {
          _navigateBasedOnType(type);
        });
        return;
      }
      
      _navigateBasedOnType(type);
      
    } catch (e) {
      print('‚ùå Erro ao processar abertura via notifica√ß√£o: $e');
    }
  }

  static void _navigateBasedOnType(String type) {
    try {
      switch (type) {
        case 'transfer_received':
          print('üß≠ Navegando para /transactions');
          if (Get.currentRoute != '/transactions') {
            Get.offAllNamed('/home');
            Future.delayed(const Duration(milliseconds: 500), () {
              Get.toNamed('/transactions');
            });
          }
          break;
        case 'deposit_confirmed':
          print('üß≠ Navegando para /home');
          if (Get.currentRoute != '/home') {
            Get.offAllNamed('/home');
          }
          break;
        default:
          print('Tipo de notifica√ß√£o desconhecido: $type');
          // Navegar para home por padr√£o
          if (Get.currentRoute != '/home') {
            Get.offAllNamed('/home');
          }
      }
    } catch (e) {
      print('‚ùå Erro na navega√ß√£o: $e');
    }
  }

  static void _onNotificationTapped(NotificationResponse response) {
    print('üîî Notifica√ß√£o local clicada: ${response.payload}');

    try {
      if (response.payload != null && response.payload!.isNotEmpty) {
        final data = response.payload!.split('|');
        final type = data.isNotEmpty ? data[0] : '';

        _navigateBasedOnType(type);
      }
    } catch (e) {
      print('‚ùå Erro ao processar clique na notifica√ß√£o: $e');
    }
  }

  /// Mostrar notifica√ß√£o local
  static Future<void> _showLocalNotification({
    required String title,
    required String body,
    Map<String, dynamic>? data,
  }) async {
    try {
      const androidDetails = AndroidNotificationDetails(
        'blinq_transfers',
        'Transfer√™ncias Blinq',
        channelDescription: 'Notifica√ß√µes de transfer√™ncias e dep√≥sitos',
        importance: Importance.high,
        priority: Priority.high,
        icon: '@mipmap/ic_launcher',
        color: Color(0xFF6EE1C6),
        playSound: true,
        enableVibration: true,
        styleInformation: BigTextStyleInformation(''), // Para textos longos
      );

      const iosDetails = DarwinNotificationDetails(
        presentAlert: true,
        presentBadge: true,
        presentSound: true,
        sound: 'default',
      );

      const details = NotificationDetails(
        android: androidDetails,
        iOS: iosDetails,
      );

      final id = DateTime.now().millisecondsSinceEpoch ~/ 1000;
      final payload = data != null ? '${data['type']}|${data['amount'] ?? ''}' : null;

      await _localNotifications.show(
        id,
        title,
        body,
        details,
        payload: payload,
      );

      print('üì± Notifica√ß√£o local exibida: $title');
    } catch (e) {
      print('‚ùå Erro ao exibir notifica√ß√£o local: $e');
    }
  }

  /// Notifica√ß√£o de transfer√™ncia recebida
  static Future<void> sendTransferReceivedNotification({
    required String receiverUserId,
    required double amount,
    required String senderName,
  }) async {
    try {
      print('üì± Enviando notifica√ß√£o de transfer√™ncia...');

      // Mostrar notifica√ß√£o local
      await _showLocalNotification(
        title: 'üí∞ Dinheiro recebido!',
        body: 'Voc√™ recebeu R\$ ${amount.toStringAsFixed(2)} de $senderName',
        data: {
          'type': 'transfer_received',
          'amount': amount.toString(),
          'sender': senderName,
          'receiverId': receiverUserId,
        },
      );

      // TODO: Implementar push notification via backend para outros dispositivos
      print('‚úÖ Notifica√ß√£o enviada para $receiverUserId');

    } catch (e) {
      print('‚ùå Erro ao enviar notifica√ß√£o de transfer√™ncia: $e');
    }
  }

  /// Notifica√ß√£o de dep√≥sito confirmado
  static Future<void> sendDepositConfirmedNotification({
    required double amount,
  }) async {
    try {
      await _showLocalNotification(
        title: '‚úÖ Dep√≥sito confirmado!',
        body: 'R\$ ${amount.toStringAsFixed(2)} foram adicionados √† sua conta',
        data: {
          'type': 'deposit_confirmed',
          'amount': amount.toString(),
        },
      );

      print('‚úÖ Notifica√ß√£o de dep√≥sito enviada');
    } catch (e) {
      print('‚ùå Erro ao enviar notifica√ß√£o de dep√≥sito: $e');
    }
  }

  /// Obter token FCM atual
  static Future<String?> getToken() async {
    try {
      return await _firebaseMessaging.getToken();
    } catch (e) {
      print('‚ùå Erro ao obter FCM token: $e');
      return null;
    }
  }

  /// ‚úÖ M√©todo para verificar e processar mensagem inicial manualmente
  /// √ötil para chamar ap√≥s login ou mudan√ßa de rota
  static Future<void> checkForInitialMessage() async {
    if (!_isInitialized) {
      print('‚ö†Ô∏è NotificationService n√£o foi inicializado ainda');
      return;
    }

    await _handleInitialMessage();
  }

  /// Cancelar todas as notifica√ß√µes
  static Future<void> cancelAllNotifications() async {
    try {
      await _localNotifications.cancelAll();
      print('üóëÔ∏è Todas as notifica√ß√µes canceladas');
    } catch (e) {
      print('‚ùå Erro ao cancelar notifica√ß√µes: $e');
    }
  }

  /// Verificar se notifica√ß√µes est√£o habilitadas
  static Future<bool> areNotificationsEnabled() async {
    try {
      final androidPlugin = _localNotifications
          .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>();
      
      if (androidPlugin != null) {
        // ‚úÖ CORRE√á√ÉO: Verificar se enabled n√£o √© null
        final bool enabled = await androidPlugin.areNotificationsEnabled() ?? false;
        return enabled;
      }
      
      return true; // Assumir true para iOS por simplicidade
    } catch (e) {
      print('‚ùå Erro ao verificar status das notifica√ß√µes: $e');
      return false;
    }
  }
}

// ‚úÖ Handler para notifica√ß√µes em background (fun√ß√£o top-level)
@pragma('vm:entry-point')
Future<void> firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  print('üîî Mensagem em background: ${message.notification?.title}');
  
  // Processar notifica√ß√£o mesmo com app fechado
  try {
    if (message.data['type'] == 'transfer_received') {
      print('üí∞ Transfer√™ncia recebida em background');
      // TODO: Salvar no banco local se necess√°rio
    }
  } catch (e) {
    print('‚ùå Erro no handler de background: $e');
  }
}