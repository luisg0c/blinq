// blinq/lib/data/transaction/datasources/transaction_remote_data_source.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import '../../../domain/entities/transaction.dart' as domain;
import '../models/transaction_model.dart';

/// Contrato para opera√ß√µes de transa√ß√£o no Firebase.
abstract class TransactionRemoteDataSource {
  Future<void> addTransaction(String userId, TransactionModel transaction);
  Future<List<domain.Transaction>> getTransactionsByUser(String userId);
  Future<List<domain.Transaction>> getTransactionsBetween({
    required String userId,
    required DateTime start,
    required DateTime end,
  });
  Stream<List<domain.Transaction>> watchTransactionsByUser(String userId);
}

/// Implementa√ß√£o usando Firestore com estrutura corrigida.
class TransactionRemoteDataSourceImpl implements TransactionRemoteDataSource {
  final FirebaseFirestore _firestore;

  TransactionRemoteDataSourceImpl({FirebaseFirestore? firestore})
      : _firestore = firestore ?? FirebaseFirestore.instance;

  @override
  Future<void> addTransaction(String userId, TransactionModel transaction) async {
    try {
      print('üìù Adicionando transa√ß√£o: ${transaction.id} para $userId');
      print('   Tipo: ${transaction.type}');
      print('   Valor: R\$ ${transaction.amount}');
      print('   Descri√ß√£o: ${transaction.description}');
      
      await _firestore
          .collection('accounts')
          .doc(userId)
          .collection('transactions')
          .doc(transaction.id)
          .set(transaction.toFirestore());
      
      print('‚úÖ Transa√ß√£o adicionada com sucesso');
    } catch (e) {
      print('‚ùå Erro ao adicionar transa√ß√£o: $e');
      throw Exception('Erro ao adicionar transa√ß√£o: $e');
    }
  }

  @override
  Future<List<domain.Transaction>> getTransactionsByUser(String userId) async {
    try {
      print('üìã Buscando transa√ß√µes para $userId');
      
      final snapshot = await _firestore
          .collection('accounts')
          .doc(userId)
          .collection('transactions')
          .orderBy('date', descending: true)
          .get();

      final transactions = snapshot.docs
          .map((doc) {
            try {
              return TransactionModel.fromFirestore(doc.id, doc.data());
            } catch (e) {
              print('‚ùå Erro ao converter transa√ß√£o ${doc.id}: $e');
              return null;
            }
          })
          .where((tx) => tx != null)
          .cast<domain.Transaction>()
          .toList();
      
      print('üìã ${transactions.length} transa√ß√µes encontradas');
      return transactions;
    } catch (e) {
      print('‚ùå Erro ao buscar transa√ß√µes: $e');
      throw Exception('Erro ao buscar transa√ß√µes: $e');
    }
  }

  @override
  Future<List<domain.Transaction>> getTransactionsBetween({
    required String userId,
    required DateTime start,
    required DateTime end,
  }) async {
    try {
      print('üìÖ Buscando transa√ß√µes entre $start e $end para $userId');
      
      final snapshot = await _firestore
          .collection('accounts')
          .doc(userId)
          .collection('transactions')
          .where('date', isGreaterThanOrEqualTo: Timestamp.fromDate(start))
          .where('date', isLessThanOrEqualTo: Timestamp.fromDate(end))
          .orderBy('date', descending: true)
          .get();

      final transactions = snapshot.docs
          .map((doc) {
            try {
              return TransactionModel.fromFirestore(doc.id, doc.data());
            } catch (e) {
              print('‚ùå Erro ao converter transa√ß√£o ${doc.id}: $e');
              return null;
            }
          })
          .where((tx) => tx != null)
          .cast<domain.Transaction>()
          .toList();
      
      print('üìÖ ${transactions.length} transa√ß√µes encontradas no per√≠odo');
      return transactions;
    } catch (e) {
      print('‚ùå Erro ao buscar transa√ß√µes por per√≠odo: $e');
      throw Exception('Erro ao buscar transa√ß√µes por per√≠odo: $e');
    }
  }

  @override
  Stream<List<domain.Transaction>> watchTransactionsByUser(String userId) {
    print('üëÄ Iniciando watch das transa√ß√µes para $userId');
    
    return _firestore
        .collection('accounts')
        .doc(userId)
        .collection('transactions')
        .orderBy('date', descending: true)
        .limit(50)
        .snapshots()
        .map((snapshot) {
          final transactions = snapshot.docs
              .map((doc) {
                try {
                  return TransactionModel.fromFirestore(doc.id, doc.data());
                } catch (e) {
                  print('‚ùå Erro ao converter transa√ß√£o ${doc.id}: $e');
                  return null;
                }
              })
              .where((tx) => tx != null)
              .cast<domain.Transaction>()
              .toList();
          
          print('üëÄ Stream transa√ß√µes: ${transactions.length} encontradas');
          
          // Log das primeiras transa√ß√µes para debug
          for (var tx in transactions.take(3)) {
            print('  üìÑ ${tx.type}: R\$ ${tx.amount} - ${tx.description}');
          }
          
          return transactions;
        })
        .handleError((e) {
          print('‚ùå Erro no stream das transa√ß√µes: $e');
          throw Exception('Erro ao monitorar transa√ß√µes: $e');
        });
  }
}