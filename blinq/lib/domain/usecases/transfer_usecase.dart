import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:uuid/uuid.dart';
import '../entities/user.dart';
import '../repositories/transaction_repository.dart';
import '../repositories/account_repository.dart';
import '../repositories/user_repository.dart';
import '../../core/exceptions/app_exception.dart';

class TransferUseCase {
  final TransactionRepository _transactionRepository;
  final AccountRepository _accountRepository;
  final UserRepository _userRepository;

  TransferUseCase({
    required TransactionRepository transactionRepository,
    required AccountRepository accountRepository,
    required UserRepository userRepository,
  }) : _transactionRepository = transactionRepository,
       _accountRepository = accountRepository,
       _userRepository = userRepository;

  Future<void> execute({
    required String senderId,
    required String receiverEmail,
    required double amount,
    String? description,
  }) async {
    print('üí∏ TransferUseCase - Iniciando transfer√™ncia');
    print('   Remetente: $senderId');
    print('   Destinat√°rio: $receiverEmail');
    print('   Valor: R\$ $amount');

    // ‚úÖ VALIDA√á√ïES B√ÅSICAS MELHORADAS
    try {
      if (amount <= 0) {
        throw const AppException('Valor da transfer√™ncia deve ser maior que zero');
      }

      if (amount > 50000) {
        throw const AppException('Valor m√°ximo por transfer√™ncia: R\$ 50.000,00');
      }

      if (senderId.trim().isEmpty || receiverEmail.trim().isEmpty) {
        throw const AppException('Dados de transfer√™ncia inv√°lidos');
      }

      // ‚úÖ BUSCAR DESTINAT√ÅRIO COM TRATAMENTO DE ERRO
      print('üîç Buscando destinat√°rio...');
      User receiver;
      try {
        receiver = await _userRepository.getUserByEmail(receiverEmail);
        print('‚úÖ Destinat√°rio encontrado: ${receiver.name}');
      } catch (e) {
        print('‚ùå Erro ao buscar destinat√°rio: $e');
        throw const AppException('Destinat√°rio n√£o encontrado no Blinq');
      }
      
      if (senderId == receiver.id) {
        throw const AppException('Voc√™ n√£o pode transferir para si mesmo');
      }

      // ‚úÖ VERIFICAR SALDO ANTES DA TRANSA√á√ÉO
      print('üí∞ Verificando saldo do remetente...');
      double senderBalance;
      try {
        senderBalance = await _accountRepository.getBalance(senderId);
        print('üí∞ Saldo atual: R\$ $senderBalance');
      } catch (e) {
        print('‚ùå Erro ao obter saldo: $e');
        throw const AppException('Erro ao verificar saldo');
      }

      if (senderBalance < amount) {
        throw AppException('Saldo insuficiente. Dispon√≠vel: R\$ ${senderBalance.toStringAsFixed(2)}');
      }

      // ‚úÖ EXECUTAR TRANSA√á√ÉO AT√îMICA COM MELHOR TRATAMENTO DE ERRO
      print('üîÑ Executando transa√ß√£o at√¥mica...');
      await _executeAtomicTransfer(senderId, receiver, amount, description ?? 'Transfer√™ncia PIX');
      
      print('‚úÖ Transfer√™ncia conclu√≠da com sucesso!');

    } catch (e) {
      print('‚ùå Erro no TransferUseCase: $e');
      
      // ‚úÖ RELAN√áAR EXCE√á√ïES DE NEG√ìCIO
      if (e is AppException) {
        rethrow;
      }
      
      // ‚úÖ CONVERTER ERROS T√âCNICOS EM ERROS DE NEG√ìCIO
      String errorMessage = 'Erro interno na transfer√™ncia';
      
      if (e.toString().contains('PERMISSION_DENIED')) {
        errorMessage = 'Permiss√£o negada. Verifique sua autentica√ß√£o.';
      } else if (e.toString().contains('UNAVAILABLE')) {
        errorMessage = 'Servi√ßo temporariamente indispon√≠vel. Tente novamente.';
      } else if (e.toString().contains('DEADLINE_EXCEEDED')) {
        errorMessage = 'Tempo limite excedido. Verifique sua conex√£o.';
      } else if (e.toString().contains('NOT_FOUND')) {
        errorMessage = 'Conta n√£o encontrada.';
      }
      
      throw AppException(errorMessage);
    }
  }

  /// ‚úÖ M√âTODO SEPARADO PARA TRANSA√á√ÉO AT√îMICA
  Future<void> _executeAtomicTransfer(
    String senderId,
    User receiver,
    double amount,
    String description,
  ) async {
    final firestore = FirebaseFirestore.instance;
    
    try {
      await firestore.runTransaction((transaction) async {
        print('üîÑ Iniciando transa√ß√£o at√¥mica...');
        
        // ‚úÖ REFER√äNCIAS
        final senderAccountRef = firestore.collection('accounts').doc(senderId);
        final receiverAccountRef = firestore.collection('accounts').doc(receiver.id);
        
        // ‚úÖ OBTER DOCUMENTOS ATUAIS
        DocumentSnapshot senderAccountSnap;
        DocumentSnapshot receiverAccountSnap;
        
        try {
          senderAccountSnap = await transaction.get(senderAccountRef);
          receiverAccountSnap = await transaction.get(receiverAccountRef);
        } catch (e) {
          print('‚ùå Erro ao obter documentos: $e');
          throw const AppException('Erro ao acessar contas');
        }
        
        // ‚úÖ VERIFICAR EXIST√äNCIA DAS CONTAS
        if (!senderAccountSnap.exists) {
          throw const AppException('Conta do remetente n√£o encontrada');
        }
        
        if (!receiverAccountSnap.exists) {
          throw const AppException('Conta do destinat√°rio n√£o encontrada');
        }
        
        // ‚úÖ OBTER SALDOS ATUAIS COM VERIFICA√á√ÉO
        final senderData = senderAccountSnap.data() as Map<String, dynamic>?;
        final receiverData = receiverAccountSnap.data() as Map<String, dynamic>?;
        
        if (senderData == null || receiverData == null) {
          throw const AppException('Dados das contas inv√°lidos');
        }
        
        final senderBalance = (senderData['balance'] as num?)?.toDouble() ?? 0.0;
        final receiverBalance = (receiverData['balance'] as num?)?.toDouble() ?? 0.0;
        
        // ‚úÖ VERIFICA√á√ÉO FINAL DE SALDO
        if (senderBalance < amount) {
          throw AppException('Saldo insuficiente. Dispon√≠vel: R\$ ${senderBalance.toStringAsFixed(2)}');
        }
        
        // ‚úÖ CALCULAR NOVOS SALDOS
        final newSenderBalance = senderBalance - amount;
        final newReceiverBalance = receiverBalance + amount;
        
        print('üí∏ Atualizando saldos:');
        print('   Remetente: R\$ $senderBalance ‚Üí R\$ $newSenderBalance');
        print('   Destinat√°rio: R\$ $receiverBalance ‚Üí R\$ $newReceiverBalance');
        
        // ‚úÖ ATUALIZAR SALDOS
        try {
          transaction.update(senderAccountRef, {
            'balance': newSenderBalance,
            'updatedAt': FieldValue.serverTimestamp(),
          });
          
          transaction.update(receiverAccountRef, {
            'balance': newReceiverBalance,
            'updatedAt': FieldValue.serverTimestamp(),
          });
        } catch (e) {
          print('‚ùå Erro ao atualizar saldos: $e');
          throw const AppException('Erro ao atualizar saldos');
        }
        
        // ‚úÖ CRIAR TRANSA√á√ïES COM IDs √öNICOS
        final timestamp = FieldValue.serverTimestamp();
        
        // Transa√ß√£o de sa√≠da (remetente)
        final outgoingTransactionId = 'tx_out_${const Uuid().v4()}';
        final outgoingTransactionRef = firestore.collection('transactions').doc(outgoingTransactionId);
        
        try {
          transaction.set(outgoingTransactionRef, {
            'userId': senderId,
            'type': 'transfer',
            'amount': -amount, // Negativo para o remetente
            'description': description,
            'counterparty': receiver.name,
            'status': 'completed',
            'date': timestamp,
            'createdAt': timestamp,
            'relatedUserId': receiver.id,
            'transferDirection': 'outgoing',
          });
        } catch (e) {
          print('‚ùå Erro ao criar transa√ß√£o de sa√≠da: $e');
          throw const AppException('Erro ao registrar transa√ß√£o de sa√≠da');
        }
        
        // Transa√ß√£o de entrada (destinat√°rio)
        final incomingTransactionId = 'tx_in_${const Uuid().v4()}';
        final incomingTransactionRef = firestore.collection('transactions').doc(incomingTransactionId);
        
        try {
          transaction.set(incomingTransactionRef, {
            'userId': receiver.id,
            'type': 'receive',
            'amount': amount, // Positivo para o destinat√°rio
            'description': 'Transfer√™ncia PIX recebida',
            'counterparty': 'Recebido de remetente',
            'status': 'completed',
            'date': timestamp,
            'createdAt': timestamp,
            'relatedUserId': senderId,
            'transferDirection': 'incoming',
          });
        } catch (e) {
          print('‚ùå Erro ao criar transa√ß√£o de entrada: $e');
          throw const AppException('Erro ao registrar transa√ß√£o de entrada');
        }
        
        print('üìù Transa√ß√µes criadas:');
        print('   Sa√≠da: $outgoingTransactionId');
        print('   Entrada: $incomingTransactionId');
      });
      
      print('‚úÖ Transa√ß√£o at√¥mica conclu√≠da com sucesso');
      
    } catch (e) {
      print('‚ùå Erro na transa√ß√£o at√¥mica: $e');
      
      // ‚úÖ RELAN√áAR EXCE√á√ïES DE NEG√ìCIO
      if (e is AppException) {
        rethrow;
      }
      
      // ‚úÖ CONVERTER ERROS DO FIRESTORE
      if (e.toString().contains('aborted')) {
        throw const AppException('Transa√ß√£o foi abortada. Tente novamente.');
      } else if (e.toString().contains('deadline-exceeded')) {
        throw const AppException('Tempo limite excedido. Verifique sua conex√£o.');
      } else if (e.toString().contains('permission-denied')) {
        throw const AppException('Permiss√£o negada. Fa√ßa login novamente.');
      }
      
      throw const AppException('Erro interno na transfer√™ncia');
    }
  }

  /// ‚úÖ M√âTODO PARA VERIFICAR LIMITES (FUTURO)
  Future<void> _validateTransferLimits(String userId, double amount) async {
    try {
      // TODO: Implementar verifica√ß√£o de limites di√°rios/mensais
      const dailyLimit = 5000.0;
      const perTransactionLimit = 2000.0;
      
      if (amount > perTransactionLimit) {
        throw AppException('Valor excede o limite por transa√ß√£o: R\$ ${perTransactionLimit.toStringAsFixed(2)}');
      }
      
      // Aqui seria verificado o total gasto no dia
      // final todaySpent = await _getTodaySpentAmount(userId);
      // if (todaySpent + amount > dailyLimit) { ... }
      
    } catch (e) {
      print('‚ùå Erro na valida√ß√£o de limites: $e');
      rethrow;
    }
  }
}