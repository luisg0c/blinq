import 'package:uuid/uuid.dart';
import '../entities/transaction.dart';
import '../repositories/transaction_repository.dart';
import '../repositories/account_repository.dart';
import '../repositories/user_repository.dart';
import '../../core/exceptions/app_exception.dart';

/// Caso de uso para realizar transfer√™ncia entre usu√°rios.
class TransferUseCase {
  final TransactionRepository _transactionRepository;
  final AccountRepository _accountRepository;
  final UserRepository _userRepository;

  TransferUseCase({
    required TransactionRepository transactionRepository,
    required AccountRepository accountRepository,
    required UserRepository userRepository,
  }) : _transactionRepository = transactionRepository,
       _accountRepository = accountRepository,
       _userRepository = userRepository;

  Future<void> execute({
    required String senderId,
    required String receiverEmail,
    required double amount,
    String? description,
  }) async {
    // ‚úÖ Valida√ß√µes aprimoradas
    if (amount <= 0) {
      throw AppException('Valor da transfer√™ncia deve ser maior que zero');
    }

    if (receiverEmail.trim().isEmpty) {
      throw AppException('Email do destinat√°rio √© obrigat√≥rio');
    }

    if (!RegExp(r'^[\w\.-]+@[\w\.-]+\.\w+$').hasMatch(receiverEmail)) {
      throw AppException('Email do destinat√°rio √© inv√°lido');
    }

    try {
      // 1. Verificar se o remetente tem saldo suficiente
      final senderBalance = await _accountRepository.getBalance(senderId);
      if (senderBalance < amount) {
        throw AppException('Saldo insuficiente para esta transfer√™ncia');
      }

      // 2. ‚úÖ Validar se o destinat√°rio existe
      User receiver;
      try {
        receiver = await _userRepository.getUserByEmail(receiverEmail);
      } catch (e) {
        throw AppException('Usu√°rio com email $receiverEmail n√£o encontrado no Blinq');
      }
      
      // 3. ‚úÖ Verificar se n√£o √© auto-transfer√™ncia
      if (senderId == receiver.id) {
        throw AppException('Voc√™ n√£o pode transferir dinheiro para si mesmo');
      }

      // 4. ‚úÖ Verificar limites de transfer√™ncia (exemplo: R$ 5.000 por transa√ß√£o)
      const maxTransferAmount = 5000.0;
      if (amount > maxTransferAmount) {
        throw AppException('Valor m√°ximo por transfer√™ncia: R\$ ${maxTransferAmount.toStringAsFixed(2)}');
      }

      // 5. Atualizar saldos
      final newSenderBalance = senderBalance - amount;
      final receiverBalance = await _accountRepository.getBalance(receiver.id);
      final newReceiverBalance = receiverBalance + amount;

      await _accountRepository.updateBalance(senderId, newSenderBalance);
      await _accountRepository.updateBalance(receiver.id, newReceiverBalance);

      // 6. Criar transa√ß√£o de sa√≠da (remetente)
      final outgoingTransaction = Transaction.transfer(
        id: const Uuid().v4(),
        amount: -amount, // Negativo para o remetente
        counterparty: receiver.name,
        description: description ?? 'Transfer√™ncia para ${receiver.name}',
      );

      // 7. Criar transa√ß√£o de entrada (destinat√°rio)
      final incomingTransaction = Transaction.transfer(
        id: const Uuid().v4(),
        amount: amount, // Positivo para o destinat√°rio
        counterparty: 'Recebido de ${await _getSenderName(senderId)}',
        description: description ?? 'Transfer√™ncia recebida',
      );

      await _transactionRepository.createTransaction(senderId, outgoingTransaction);
      await _transactionRepository.createTransaction(receiver.id, incomingTransaction);

      // 8. ‚úÖ Trigger notifica√ß√£o push para o destinat√°rio
      await _sendNotificationToReceiver(receiver, amount);

    } catch (e) {
      if (e is AppException) {
        rethrow;
      }
      throw AppException('Erro inesperado durante a transfer√™ncia. Tente novamente.');
    }
  }

  Future<String> _getSenderName(String senderId) async {
    try {
      final sender = await _userRepository.getUserById(senderId);
      return sender.name;
    } catch (e) {
      return 'Usu√°rio Blinq';
    }
  }

  Future<void> _sendNotificationToReceiver(User receiver, double amount) async {
    try {
      // TODO: Implementar notifica√ß√£o push real
      print('üì± Notifica√ß√£o enviada para ${receiver.email}: Voc√™ recebeu R\$ ${amount.toStringAsFixed(2)}');
      
      // Simula√ß√£o de push notification
      // await NotificationService.send(
      //   userId: receiver.id,
      //   title: 'üí∞ Dinheiro recebido!',
      //   body: 'Voc√™ recebeu R\$ ${amount.toStringAsFixed(2)} no seu Blinq',
      //   data: {
      //     'type': 'transfer_received',
      //     'amount': amount.toString(),
      //   },
      // );
    } catch (e) {
      // N√£o falhar a transfer√™ncia por causa da notifica√ß√£o
      print('‚ö†Ô∏è  Erro ao enviar notifica√ß√£o: $e');
    }
  }
}