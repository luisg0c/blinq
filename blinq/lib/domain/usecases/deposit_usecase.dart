import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:uuid/uuid.dart';
import '../entities/transaction.dart';
import '../repositories/transaction_repository.dart';
import '../repositories/account_repository.dart';

class DepositUseCase {
  final TransactionRepository _transactionRepository;
  final AccountRepository _accountRepository;

  DepositUseCase({
    required TransactionRepository transactionRepository,
    required AccountRepository accountRepository,
  }) : _transactionRepository = transactionRepository,
       _accountRepository = accountRepository;

  Future<void> execute({
    required String userId,
    required double amount,
    String? description,
  }) async {
    print('üí∞ DepositUseCase - Iniciando dep√≥sito para $userId: R\$ $amount');

    // Valida√ß√µes b√°sicas
    if (amount <= 0) {
      throw Exception('Valor do dep√≥sito deve ser maior que zero');
    }
    if (amount > 50000) {
      throw Exception('Valor m√°ximo por dep√≥sito: R\$ 50.000,00');
    }

    try {
      // ‚úÖ USANDO TRANSA√á√ÉO AT√îMICA DO FIRESTORE
      final firestore = FirebaseFirestore.instance;
      
      await firestore.runTransaction((transaction) async {
        
        // 1. Obter saldo atual
        final accountRef = firestore.collection('accounts').doc(userId);
        final accountSnap = await transaction.get(accountRef);
        
        if (!accountSnap.exists) {
          throw Exception('Conta n√£o encontrada');
        }
        
        final currentBalance = (accountSnap.data()!['balance'] as num?)?.toDouble() ?? 0.0;
        final newBalance = currentBalance + amount;
        
        print('üí∞ Saldo atual: R\$ $currentBalance');
        print('üí∞ Novo saldo: R\$ $newBalance');
        
        // 2. Atualizar saldo
        transaction.update(accountRef, {
          'balance': newBalance,
          'updatedAt': FieldValue.serverTimestamp(),
        });
        
        // 3. Criar transa√ß√£o global
        final transactionId = const Uuid().v4();
        final transactionRef = firestore.collection('transactions').doc(transactionId);
        
        transaction.set(transactionRef, {
          'userId': userId,
          'type': 'deposit',
          'amount': amount,
          'description': description ?? 'Dep√≥sito PIX',
          'counterparty': 'Dep√≥sito',
          'status': 'completed',
          'date': FieldValue.serverTimestamp(),
          'createdAt': FieldValue.serverTimestamp(),
        });
        
        print('üìù Transa√ß√£o criada: $transactionId');
      });

      print('‚úÖ Dep√≥sito conclu√≠do com sucesso!');
      
    } catch (e) {
      print('‚ùå Erro no DepositUseCase: $e');
      rethrow;
    }
  }
}