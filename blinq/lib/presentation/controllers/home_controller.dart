// lib/presentation/controllers/home_controller.dart
import 'package:get/get.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../../domain/entities/transaction.dart' as domain;
import '../../domain/repositories/account_repository.dart';
import '../../domain/repositories/transaction_repository.dart';
import 'dart:async';

class HomeController extends GetxController {
  final AccountRepository _accountRepository;
  final TransactionRepository _transactionRepository;

  HomeController({
    required AccountRepository accountRepository,
    required TransactionRepository transactionRepository,
  }) : _accountRepository = accountRepository,
       _transactionRepository = transactionRepository;

  // Observables
  final RxBool isLoading = false.obs;
  final RxString error = ''.obs;
  final RxDouble balance = 0.0.obs;
  final RxList<domain.Transaction> recentTransactions = <domain.Transaction>[].obs;

  // ‚úÖ CONTROLE DE USU√ÅRIO ATUAL
  String? _currentUserId;
  StreamSubscription<double>? _balanceSubscription;
  StreamSubscription<List<domain.Transaction>>? _transactionsSubscription;

  @override
  void onInit() {
    super.onInit();
    _initializeData();
  }

  @override
  void onClose() {
    print('üóëÔ∏è HomeController: Limpando recursos...');
    _cancelSubscriptions();
    _clearUserData();
    super.onClose();
  }

  /// ‚úÖ INICIALIZA√á√ÉO SEGURA COM VERIFICA√á√ÉO DE USU√ÅRIO
  Future<void> _initializeData() async {
    try {
      isLoading.value = true;
      error.value = '';

      // ‚úÖ VERIFICAR USU√ÅRIO ATUAL
      final currentUser = FirebaseAuth.instance.currentUser;
      if (currentUser == null) {
        error.value = 'Usu√°rio n√£o autenticado';
        return;
      }

      // ‚úÖ VERIFICAR SE √â UM NOVO USU√ÅRIO
      if (_currentUserId != currentUser.uid) {
        print('üë§ Novo usu√°rio detectado: ${currentUser.email}');
        print('   Usu√°rio anterior: $_currentUserId');
        print('   Usu√°rio atual: ${currentUser.uid}');
        
        // ‚úÖ LIMPAR DADOS DO USU√ÅRIO ANTERIOR
        await _switchUser(currentUser.uid, currentUser.email!);
      }

      print('üè† HomeController inicializando para: ${currentUser.email}');

      // ‚úÖ GARANTIR QUE A CONTA EXISTE
      await _ensureAccountExists(currentUser.uid, currentUser.email!, currentUser.displayName);

      // ‚úÖ CONFIGURAR STREAMS APENAS PARA O USU√ÅRIO ATUAL
      _setupRealTimeStreams(currentUser.uid);

    } catch (e) {
      error.value = 'Erro ao carregar dados: $e';
      print('‚ùå Erro na inicializa√ß√£o: $e');
    } finally {
      isLoading.value = false;
    }
  }

  /// ‚úÖ TROCAR USU√ÅRIO E LIMPAR DADOS ANTERIORES
  Future<void> _switchUser(String newUserId, String newUserEmail) async {
    print('üîÑ Trocando usu√°rio...');
    print('   De: $_currentUserId');
    print('   Para: $newUserId ($newUserEmail)');

    // ‚úÖ CANCELAR STREAMS ANTERIORES
    _cancelSubscriptions();

    // ‚úÖ LIMPAR DADOS DO USU√ÅRIO ANTERIOR
    _clearUserData();

    // ‚úÖ DEFINIR NOVO USU√ÅRIO
    _currentUserId = newUserId;
    
    print('‚úÖ Usu√°rio trocado com sucesso');
  }

  /// ‚úÖ CANCELAR TODAS AS SUBSCRIPTIONS
  void _cancelSubscriptions() {
    print('üõë Cancelando subscriptions...');
    
    _balanceSubscription?.cancel();
    _balanceSubscription = null;
    
    _transactionsSubscription?.cancel();
    _transactionsSubscription = null;
    
    print('‚úÖ Subscriptions canceladas');
  }

  /// ‚úÖ LIMPAR DADOS DO USU√ÅRIO
  void _clearUserData() {
    print('üßπ Limpando dados do usu√°rio...');
    
    balance.value = 0.0;
    recentTransactions.clear();
    error.value = '';
    
    print('‚úÖ Dados limpos');
  }

  /// ‚úÖ CONFIGURAR STREAMS COM VERIFICA√á√ÉO DE USU√ÅRIO
  void _setupRealTimeStreams(String userId) {
    print('üëÄ Configurando streams para: $userId');

    // ‚úÖ VERIFICAR SE √â O USU√ÅRIO CORRETO
    if (_currentUserId != userId) {
      print('‚ö†Ô∏è UserId n√£o confere! Atual: $_currentUserId, Solicitado: $userId');
      return;
    }

    // ‚úÖ STREAM DO SALDO
    _balanceSubscription?.cancel();
    _balanceSubscription = _accountRepository.watchBalance(userId).listen(
      (newBalance) {
        // ‚úÖ VERIFICAR SE AINDA √â O USU√ÅRIO CORRETO
        if (_currentUserId == userId) {
          balance.value = newBalance;
          print('üí∞ Saldo atualizado para $userId: R\$ $newBalance');
        } else {
          print('‚ö†Ô∏è Saldo ignorado - usu√°rio mudou');
        }
      },
      onError: (e) {
        print('‚ùå Erro no stream do saldo: $e');
        if (_currentUserId == userId) {
          error.value = 'Erro ao carregar saldo';
        }
      },
    );

    // ‚úÖ STREAM DAS TRANSA√á√ïES
    _transactionsSubscription?.cancel();
    _transactionsSubscription = _transactionRepository.watchTransactionsByUser(userId).listen(
      (transactions) {
        // ‚úÖ VERIFICAR SE AINDA √â O USU√ÅRIO CORRETO
        if (_currentUserId == userId) {
          recentTransactions.value = transactions.take(5).toList();
          print('üìã ${transactions.length} transa√ß√µes carregadas para $userId');
          
          // ‚úÖ LOG DAS PRIMEIRAS TRANSA√á√ïES PARA DEBUG
          for (var tx in transactions.take(3)) {
            print('  üìÑ ${tx.type}: R\$ ${tx.amount} - ${tx.description}');
          }
        } else {
          print('‚ö†Ô∏è Transa√ß√µes ignoradas - usu√°rio mudou');
        }
      },
      onError: (e) {
        print('‚ùå Erro no stream das transa√ß√µes: $e');
        if (_currentUserId == userId) {
          recentTransactions.value = [];
          error.value = 'Erro ao carregar transa√ß√µes';
        }
      },
    );

    print('‚úÖ Streams configurados para $userId');
  }

  /// ‚úÖ GARANTIR QUE A CONTA EXISTE (SEM ALTERAR OUTRAS CONTAS)
  Future<void> _ensureAccountExists(String userId, String email, String? displayName) async {
    try {
      final firestore = FirebaseFirestore.instance;
      final accountDoc = await firestore.collection('accounts').doc(userId).get();
      
      if (!accountDoc.exists) {
        print('üÜï Criando conta para: $email');
        
        await firestore.collection('accounts').doc(userId).set({
          'balance': 1000.0, // Saldo inicial
          'createdAt': FieldValue.serverTimestamp(),
          'updatedAt': FieldValue.serverTimestamp(),
          'user': {
            'id': userId,
            'email': email,
            'name': displayName ?? 'Usu√°rio Blinq',
          },
        });
        
        await _createWelcomeTransaction(userId);
        print('‚úÖ Conta criada com saldo inicial para $userId');
      } else {
        print('‚úÖ Conta j√° existe para: $userId');
      }
    } catch (e) {
      print('‚ùå Erro ao criar/verificar conta: $e');
      throw e;
    }
  }

  /// ‚úÖ CRIAR TRANSA√á√ÉO DE BOAS-VINDAS ESPEC√çFICA DO USU√ÅRIO
  Future<void> _createWelcomeTransaction(String userId) async {
    try {
      final welcomeTransaction = domain.Transaction(
        id: 'welcome_${userId}_${DateTime.now().millisecondsSinceEpoch}',
        amount: 1000.0,
        date: DateTime.now(),
        description: 'B√¥nus de boas-vindas - Bem-vindo ao Blinq! üéâ',
        type: 'bonus',
        counterparty: 'Blinq',
        status: 'completed',
      );

      await _transactionRepository.createTransaction(userId, welcomeTransaction);
      print('‚úÖ Transa√ß√£o de boas-vindas criada para $userId');
    } catch (e) {
      print('‚ùå Erro ao criar transa√ß√£o de boas-vindas: $e');
    }
  }

  /// ‚úÖ REFRESH COM VERIFICA√á√ÉO DE USU√ÅRIO
  Future<void> refreshData() async {
    final currentUser = FirebaseAuth.instance.currentUser;
    if (currentUser == null) {
      error.value = 'Usu√°rio n√£o autenticado';
      return;
    }

    // ‚úÖ VERIFICAR SE √â O MESMO USU√ÅRIO
    if (_currentUserId != currentUser.uid) {
      print('üë§ Usu√°rio mudou durante refresh');
      await _initializeData();
      return;
    }

    print('üîÑ Refreshing data para: ${currentUser.email}');
    await _initializeData();
  }

  /// ‚úÖ M√âTODOS DE NAVEGA√á√ÉO (SEM ALTERA√á√ÉO)
  void goToDeposit() => Get.toNamed('/deposit');
  void goToTransfer() => Get.toNamed('/transfer');
  void goToTransactions() => Get.toNamed('/transactions');
  void goToProfile() => Get.toNamed('/profile');
  void goToExchangeRates() => Get.toNamed('/exchange-rates');

  /// ‚úÖ LOGOUT SEGURO COM LIMPEZA
  Future<void> logout() async {
    try {
      print('üëã Fazendo logout do usu√°rio: $_currentUserId');
      
      // ‚úÖ LIMPAR TUDO ANTES DO LOGOUT
      _cancelSubscriptions();
      _clearUserData();
      _currentUserId = null;
      
      await FirebaseAuth.instance.signOut();
      Get.offAllNamed('/welcome');
      
      print('‚úÖ Logout realizado e dados limpos');
    } catch (e) {
      print('‚ùå Erro no logout: $e');
    }
  }

  /// ‚úÖ DEBUG - VERIFICAR ESTADO ATUAL
  void debugCurrentState() {
    print('üîç DEBUG - Estado atual:');
    print('   Current User ID: $_currentUserId');
    print('   Firebase User: ${FirebaseAuth.instance.currentUser?.uid}');
    print('   Balance: ${balance.value}');
    print('   Transactions: ${recentTransactions.length}');
    print('   Error: ${error.value}');
  }
}