import 'package:get/get.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import '../../core/exceptions/app_exception.dart';
import '../../domain/usecases/transfer_usecase.dart';
import '../../core/theme/app_colors.dart';
import '../../routes/app_routes.dart';
import '../../core/services/notification_service.dart';

/// Controller robusto para o fluxo completo de transfer√™ncias
class TransferController extends GetxController {
  final TransferUseCase _transferUseCase;

  TransferController({required TransferUseCase transferUseCase})
      : _transferUseCase = transferUseCase;

  // ‚úÖ OBSERVABLES DE ESTADO
  final RxBool isLoading = false.obs;
  final RxnString errorMessage = RxnString();
  final RxnString successMessage = RxnString();
  
  // ‚úÖ DADOS DA TRANSFER√äNCIA
  final RxString recipientEmail = ''.obs;
  final RxDouble amount = 0.0.obs;
  final RxString description = ''.obs;
  final RxnString recipientName = RxnString();
  final RxnString recipientId = RxnString();

  // ‚úÖ CONTROLE DE TENTATIVAS E FEEDBACK
  final RxInt attemptCount = 0.obs;
  final RxBool isRetrying = false.obs;
  final RxDouble transferProgress = 0.0.obs;

  @override
  void onInit() {
    super.onInit();
    print('üîß TransferController inicializado');
  }

  @override
  void onClose() {
    _clearSensitiveData();
    super.onClose();
  }

  /// ‚úÖ CONFIGURAR DADOS DA TRANSFER√äNCIA COM VALIDA√á√ÉO
  void setTransferData({
    required String email,
    required double value,
    String? desc,
    String? recipientUserName,
    String? recipientUserId,
  }) {
    try {
      print('üìù Configurando dados da transfer√™ncia...');
      
      // Valida√ß√µes b√°sicas
      if (email.trim().isEmpty) {
        throw const AppException('Email do destinat√°rio √© obrigat√≥rio');
      }
      
      if (value <= 0) {
        throw const AppException('Valor deve ser maior que zero');
      }
      
      if (value > 50000) {
        throw const AppException('Valor m√°ximo por transfer√™ncia: R\$ 50.000,00');
      }

      // Verificar se n√£o √© auto-transfer√™ncia
      final currentUser = FirebaseAuth.instance.currentUser;
      if (currentUser?.email?.toLowerCase() == email.toLowerCase()) {
        throw const AppException('Voc√™ n√£o pode transferir para si mesmo');
      }

      // Configurar dados
      recipientEmail.value = email.trim().toLowerCase();
      amount.value = value;
      description.value = desc?.trim() ?? 'Transfer√™ncia PIX';
      recipientName.value = recipientUserName;
      recipientId.value = recipientUserId;

      // Limpar estados anteriores
      errorMessage.value = null;
      successMessage.value = null;
      attemptCount.value = 0;
      transferProgress.value = 0.0;

      print('‚úÖ Dados configurados:');
      print('   Destinat√°rio: ${recipientEmail.value}');
      print('   Valor: R\$ ${amount.value.toStringAsFixed(2)}');
      print('   Descri√ß√£o: ${description.value}');

    } catch (e) {
      print('‚ùå Erro ao configurar dados: $e');
      errorMessage.value = e.toString().replaceAll('AppException: ', '');
      _showErrorFeedback(errorMessage.value!);
    }
  }

  /// ‚úÖ EXECUTAR TRANSFER√äNCIA COM PROGRESSO E RETRY
  Future<void> executeTransfer() async {
    if (isLoading.value) {
      print('‚ö†Ô∏è Transfer√™ncia j√° em andamento');
      return;
    }

    print('üí∏ Iniciando execu√ß√£o da transfer√™ncia...');
    
    // Validar dados antes de executar
    if (!_validateTransferData()) {
      return;
    }

    isLoading.value = true;
    errorMessage.value = null;
    transferProgress.value = 0.1; // Progresso inicial

    try {
      final currentUser = FirebaseAuth.instance.currentUser;
      if (currentUser == null) {
        throw const AppException('Usu√°rio n√£o autenticado');
      }

      attemptCount.value++;
      print('üîÑ Tentativa ${attemptCount.value}/3');

      // Simular progresso da opera√ß√£o
      await _updateProgress();

      // ‚úÖ EXECUTAR TRANSFER√äNCIA VIA USE CASE
      await _transferUseCase.execute(
        senderId: currentUser.uid,
        receiverEmail: recipientEmail.value,
        amount: amount.value,
        description: description.value,
      );

      transferProgress.value = 1.0; // Progresso completo

      // ‚úÖ SUCESSO - CONFIGURAR FEEDBACK E NAVEGAR
      await _handleTransferSuccess();

    } on AppException catch (e) {
      print('‚ùå Erro de neg√≥cio: ${e.message}');
      transferProgress.value = 0.0;
      errorMessage.value = e.message;
      
      await _handleTransferError(e);

    } catch (e) {
      print('‚ùå Erro t√©cnico: $e');
      transferProgress.value = 0.0;
      
      final errorMsg = _formatTechnicalError(e);
      errorMessage.value = errorMsg;
      
      await _handleTransferError(AppException(errorMsg));

    } finally {
      isLoading.value = false;
      isRetrying.value = false;
    }
  }

  /// ‚úÖ SIMULAR PROGRESSO DA OPERA√á√ÉO
  Future<void> _updateProgress() async {
    // Valida√ß√£o inicial
    transferProgress.value = 0.2;
    await Future.delayed(const Duration(milliseconds: 300));

    // Verifica√ß√£o de saldo
    transferProgress.value = 0.4;
    await Future.delayed(const Duration(milliseconds: 300));

    // Busca do destinat√°rio
    transferProgress.value = 0.6;
    await Future.delayed(const Duration(milliseconds: 300));

    // Execu√ß√£o da transa√ß√£o
    transferProgress.value = 0.8;
    await Future.delayed(const Duration(milliseconds: 300));
  }

  /// ‚úÖ LIDAR COM SUCESSO DA TRANSFER√äNCIA
  Future<void> _handleTransferSuccess() async {
    successMessage.value = 'Transfer√™ncia realizada com sucesso! üéâ';
    
    print('‚úÖ Transfer√™ncia executada com sucesso');
    print('   Para: ${recipientName.value ?? recipientEmail.value}');
    print('   Valor: R\$ ${amount.value.toStringAsFixed(2)}');

    // ‚úÖ CAPTURAR VALORES ANTES DE LIMPAR
    final transferAmount = amount.value;
    final recipientDisplayName = recipientName.value ?? recipientEmail.value;
    final transferDescription = description.value;

    // ‚úÖ LIMPAR DADOS SENS√çVEIS
    _clearSensitiveData();

    // ‚úÖ NAVEGAR PARA HOME
    Get.offAllNamed(AppRoutes.home);

    // ‚úÖ MOSTRAR FEEDBACK AP√ìS NAVEGA√á√ÉO
    await Future.delayed(const Duration(milliseconds: 800));
    
    _showSuccessFeedback(
      'Transfer√™ncia Realizada! üí∏',
      'R\$ ${transferAmount.toStringAsFixed(2).replaceAll('.', ',')} enviados para $recipientDisplayName',
    );

    // ‚úÖ TENTAR ENVIAR NOTIFICA√á√ÉO (SEM FALHAR SE DER ERRO)
    try {
      await NotificationService.sendTransferReceivedNotification(
        receiverUserId: recipientId.value ?? '',
        amount: transferAmount,
        senderName: FirebaseAuth.instance.currentUser?.displayName ?? 'Usu√°rio Blinq',
      );
    } catch (e) {
      print('‚ö†Ô∏è Falha ao enviar notifica√ß√£o: $e');
      // N√£o falhar a transfer√™ncia por causa da notifica√ß√£o
    }
  }

  /// ‚úÖ LIDAR COM ERRO DA TRANSFER√äNCIA
  Future<void> _handleTransferError(AppException exception) async {
    print('‚ùå Lidando com erro: ${exception.message}');

    // ‚úÖ VERIFICAR SE PODE TENTAR NOVAMENTE
    final canRetry = _canRetryTransfer(exception);
    
    if (canRetry && attemptCount.value < 3) {
      _showRetryOption(exception);
    } else {
      _showFinalError(exception);
    }
  }

  /// ‚úÖ VERIFICAR SE ERRO PERMITE RETRY
  bool _canRetryTransfer(AppException exception) {
    final message = exception.message.toLowerCase();
    
    // Erros que permitem retry
    if (message.contains('conex√£o') ||
        message.contains('timeout') ||
        message.contains('temporariamente') ||
        message.contains('tempo limite') ||
        message.contains('indispon√≠vel')) {
      return true;
    }
    
    // Erros que N√ÉO permitem retry
    if (message.contains('saldo insuficiente') ||
        message.contains('n√£o encontrado') ||
        message.contains('n√£o pode transferir para si mesmo') ||
        message.contains('valor m√°ximo') ||
        message.contains('permiss√£o negada')) {
      return false;
    }
    
    return false; // Por padr√£o, n√£o permitir retry
  }

  /// ‚úÖ MOSTRAR OP√á√ÉO DE RETRY
  void _showRetryOption(AppException exception) {
    Get.dialog(
      AlertDialog(
        title: const Row(
          children: [
            Icon(Icons.warning_amber, color: AppColors.warning),
            SizedBox(width: 8),
            Text('Erro na Transfer√™ncia'),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(exception.message),
            const SizedBox(height: 16),
            Text(
              'Tentativa ${attemptCount.value}/3',
              style: const TextStyle(
                fontWeight: FontWeight.w500,
                color: AppColors.warning,
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () {
              Get.back();
              _clearSensitiveData();
            },
            child: const Text('Cancelar'),
          ),
          ElevatedButton(
            onPressed: () {
              Get.back();
              retryTransfer();
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: AppColors.primary,
            ),
            child: const Text(
              'Tentar Novamente',
              style: TextStyle(color: Colors.white),
            ),
          ),
        ],
      ),
      barrierDismissible: false,
    );
  }

  /// ‚úÖ MOSTRAR ERRO FINAL
  void _showFinalError(AppException exception) {
    _showErrorFeedback(
      'Transfer√™ncia Falhou',
      exception.message,
    );
  }

  /// ‚úÖ RETRY DA TRANSFER√äNCIA
  Future<void> retryTransfer() async {
    if (attemptCount.value >= 3) {
      _showErrorFeedback('Limite de tentativas atingido');
      return;
    }

    isRetrying.value = true;
    
    print('üîÑ Tentando transfer√™ncia novamente...');
    
    // Aguardar um pouco antes de tentar novamente
    await Future.delayed(const Duration(seconds: 2));
    
    await executeTransfer();
  }

  /// ‚úÖ VALIDAR DADOS DA TRANSFER√äNCIA
  bool _validateTransferData() {
    if (recipientEmail.value.trim().isEmpty) {
      errorMessage.value = 'Email do destinat√°rio √© obrigat√≥rio';
      _showErrorFeedback(errorMessage.value!);
      return false;
    }

    if (amount.value <= 0) {
      errorMessage.value = 'Valor deve ser maior que zero';
      _showErrorFeedback(errorMessage.value!);
      return false;
    }

    if (amount.value > 50000) {
      errorMessage.value = 'Valor m√°ximo por transfer√™ncia: R\$ 50.000,00';
      _showErrorFeedback(errorMessage.value!);
      return false;
    }

    final currentUser = FirebaseAuth.instance.currentUser;
    if (currentUser == null) {
      errorMessage.value = 'Usu√°rio n√£o autenticado';
      _showErrorFeedback(errorMessage.value!);
      return false;
    }

    return true;
  }

  /// ‚úÖ FORMATAR ERROS T√âCNICOS
  String _formatTechnicalError(dynamic error) {
    final errorStr = error.toString().toLowerCase();
    
    if (errorStr.contains('network') || errorStr.contains('connection')) {
      return 'Erro de conex√£o. Verifique sua internet.';
    }
    
    if (errorStr.contains('timeout') || errorStr.contains('deadline')) {
      return 'Tempo limite excedido. Tente novamente.';
    }
    
    if (errorStr.contains('permission')) {
      return 'Permiss√£o negada. Fa√ßa login novamente.';
    }
    
    if (errorStr.contains('unavailable')) {
      return 'Servi√ßo temporariamente indispon√≠vel.';
    }
    
    return 'Erro interno. Tente novamente mais tarde.';
  }

  /// ‚úÖ FEEDBACK VISUAL DE SUCESSO
  void _showSuccessFeedback(String title, [String? message]) {
    Get.snackbar(
      title,
      message ?? 'Opera√ß√£o realizada com sucesso',
      backgroundColor: AppColors.success,
      colorText: Colors.white,
      snackPosition: SnackPosition.BOTTOM,
      duration: const Duration(seconds: 4),
      margin: const EdgeInsets.all(16),
      borderRadius: 12,
      icon: const Icon(
        Icons.check_circle,
        color: Colors.white,
        size: 28,
      ),
    );
  }

  /// ‚úÖ FEEDBACK VISUAL DE ERRO
  void _showErrorFeedback(String title, [String? message]) {
    Get.snackbar(
      title,
      message ?? 'Ocorreu um erro na opera√ß√£o',
      backgroundColor: AppColors.error,
      colorText: Colors.white,
      snackPosition: SnackPosition.BOTTOM,
      duration: const Duration(seconds: 4),
      margin: const EdgeInsets.all(16),
      borderRadius: 12,
      icon: const Icon(
        Icons.error_outline,
        color: Colors.white,
        size: 28,
      ),
    );
  }

  /// ‚úÖ LIMPAR DADOS SENS√çVEIS
  void _clearSensitiveData() {
    recipientEmail.value = '';
    amount.value = 0.0;
    description.value = '';
    recipientName.value = null;
    recipientId.value = null;
    errorMessage.value = null;
    successMessage.value = null;
    attemptCount.value = 0;
    transferProgress.value = 0.0;
    
    print('üßπ Dados sens√≠veis limpos');
  }

  /// ‚úÖ LIMPAR APENAS MENSAGENS DE ERRO
  void clearError() {
    errorMessage.value = null;
  }

  /// ‚úÖ CANCELAR TRANSFER√äNCIA
  void cancelTransfer() {
    if (isLoading.value) {
      print('‚ö†Ô∏è Tentativa de cancelar transfer√™ncia em andamento');
      
      Get.dialog(
        AlertDialog(
          title: const Text('Cancelar Transfer√™ncia?'),
          content: const Text(
            'A transfer√™ncia est√° sendo processada. Tem certeza que deseja cancelar?'
          ),
          actions: [
            TextButton(
              onPressed: () => Get.back(),
              child: const Text('N√£o'),
            ),
            TextButton(
              onPressed: () {
                Get.back();
                _forceCancelTransfer();
              },
              child: const Text(
                'Sim, Cancelar',
                style: TextStyle(color: AppColors.error),
              ),
            ),
          ],
        ),
      );
    } else {
      _clearSensitiveData();
      Get.back();
    }
  }

  /// ‚úÖ FOR√áAR CANCELAMENTO
  void _forceCancelTransfer() {
    isLoading.value = false;
    isRetrying.value = false;
    _clearSensitiveData();
    
    Get.back();
    
    Get.snackbar(
      'Transfer√™ncia Cancelada',
      'A opera√ß√£o foi cancelada pelo usu√°rio',
      backgroundColor: AppColors.warning.withOpacity(0.1),
      colorText: AppColors.warning,
      snackPosition: SnackPosition.BOTTOM,
    );
  }

  /// ‚úÖ OBTER RESUMO DA TRANSFER√äNCIA
  Map<String, dynamic> getTransferSummary() {
    return {
      'recipient': recipientEmail.value,
      'recipientName': recipientName.value,
      'amount': amount.value,
      'formattedAmount': 'R\$ ${amount.value.toStringAsFixed(2).replaceAll('.', ',')}',
      'description': description.value,
      'isValid': _validateTransferData(),
      'isLoading': isLoading.value,
      'progress': transferProgress.value,
    };
  }

  /// ‚úÖ VERIFICAR SE H√Å DADOS V√ÅLIDOS
  bool get hasValidData => 
      recipientEmail.value.isNotEmpty && 
      amount.value > 0 && 
      amount.value <= 50000;

  /// ‚úÖ VERIFICAR SE PODE EXECUTAR TRANSFER√äNCIA
  bool get canExecuteTransfer => 
      hasValidData && 
      !isLoading.value && 
      errorMessage.value == null;
}