import 'package:get/get.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../../presentation/controllers/home_controller.dart';
import '../../presentation/controllers/transfer_controller.dart';
import '../../presentation/controllers/deposit_controller.dart';
import '../../presentation/controllers/pin_controller.dart';
import '../services/email_validation_service.dart';
import '../services/notification_service.dart';
import '../../routes/app_routes.dart';

/// Gerenciador centralizado de sess√µes de usu√°rio
class UserSessionManager {
  static String? _currentUserId;
  static final Map<String, DateTime> _sessionTimestamps = {};

  /// ‚úÖ INICIALIZAR SESS√ÉO DE USU√ÅRIO
  static Future<void> initializeUserSession(String userId) async {
    try {
      print('üîê Inicializando sess√£o para: $userId');

      // Verificar se √© uma nova sess√£o
      if (_currentUserId != null && _currentUserId != userId) {
        print('üîÑ Nova sess√£o detectada - limpando anterior');
        await clearPreviousSession();
      }

      _currentUserId = userId;
      _sessionTimestamps[userId] = DateTime.now();

      // Inicializar servi√ßos espec√≠ficos do usu√°rio
      await _initializeUserServices(userId);

      // Navegar para home
      Get.offAllNamed(AppRoutes.home);

      print('‚úÖ Sess√£o inicializada para: $userId');

    } catch (e) {
      print('‚ùå Erro ao inicializar sess√£o: $e');
      rethrow;
    }
  }

  /// ‚úÖ LIMPAR SESS√ÉO ANTERIOR
  static Future<void> clearPreviousSession() async {
    try {
      print('üßπ Limpando sess√£o anterior...');

      // Limpar todos os controllers com dados de usu√°rio
      await _cleanupUserControllers();

      // Limpar caches de servi√ßos
      EmailValidationService.clearCache();

      print('‚úÖ Sess√£o anterior limpa');

    } catch (e) {
      print('‚ùå Erro ao limpar sess√£o anterior: $e');
    }
  }

  /// ‚úÖ LIMPAR TODOS OS DADOS DO USU√ÅRIO
  static Future<void> clearAllUserData() async {
    try {
      print('üóëÔ∏è Limpando todos os dados do usu√°rio...');

      await _cleanupUserControllers();
      await _cleanupUserServices();

      _currentUserId = null;
      _sessionTimestamps.clear();

      print('‚úÖ Todos os dados do usu√°rio limpos');

    } catch (e) {
      print('‚ùå Erro ao limpar dados: $e');
    }
  }

  /// ‚úÖ INICIALIZAR SERVI√áOS DO USU√ÅRIO
  static Future<void> _initializeUserServices(String userId) async {
    try {
      // Inicializar notifica√ß√µes para o usu√°rio
      await NotificationService.initializeForUser(userId);

      print('‚úÖ Servi√ßos inicializados para: $userId');
    } catch (e) {
      print('‚ùå Erro ao inicializar servi√ßos: $e');
    }
  }

  /// ‚úÖ LIMPAR CONTROLLERS DE USU√ÅRIO
  static Future<void> _cleanupUserControllers() async {
    final controllersToClean = [
      HomeController,
      TransferController,
      DepositController,
      // N√£o limpar PinController pois √© global
    ];

    for (final controllerType in controllersToClean) {
      try {
        if (Get.isRegistered(tag: _currentUserId)) {
          final controller = Get.find(tag: _currentUserId);
          if (controller is GetxController) {
            controller.onClose();
          }
          Get.delete(tag: _currentUserId);
        }

        if (Get.isRegistered<dynamic>()) {
          Get.delete<dynamic>();
        }
      } catch (e) {
        print('‚ö†Ô∏è Erro ao limpar controller $controllerType: $e');
      }
    }
  }

  /// ‚úÖ LIMPAR SERVI√áOS DO USU√ÅRIO
  static Future<void> _cleanupUserServices() async {
    try {
      EmailValidationService.clearCache();
      await NotificationService.clearUserData(_currentUserId);
    } catch (e) {
      print('‚ùå Erro ao limpar servi√ßos: $e');
    }
  }

  /// ‚úÖ VERIFICAR SESS√ÉO ATIVA
  static bool hasActiveSession() {
    final currentUser = FirebaseAuth.instance.currentUser;
    return currentUser != null && _currentUserId == currentUser.uid;
  }

  /// ‚úÖ OBTER USU√ÅRIO ATUAL
  static String? getCurrentUserId() {
    return _currentUserId;
  }

  /// ‚úÖ VERIFICAR SE √â USU√ÅRIO AUTORIZADO
  static bool isAuthorizedUser(String userId) {
    final currentUser = FirebaseAuth.instance.currentUser;
    return currentUser != null && 
           currentUser.uid == userId && 
           _currentUserId == userId;
  }

  /// ‚úÖ DEBUG - ESTADO DA SESS√ÉO
  static Map<String, dynamic> getSessionDebugInfo() {
    return {
      'currentUserId': _currentUserId,
      'firebaseUserId': FirebaseAuth.instance.currentUser?.uid,
      'sessionTimestamp': _sessionTimestamps[_currentUserId]?.toIso8601String(),
      'hasActiveSession': hasActiveSession(),
      'registeredControllers': Get.registered.length,
    };
  }
}