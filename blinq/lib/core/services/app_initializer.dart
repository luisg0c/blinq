import 'package:firebase_auth/firebase_auth.dart';
import 'package:get/get.dart';
import '../../routes/app_routes.dart';
import 'user_session_manager.dart';

class AppInitializer {
  
  /// ‚úÖ INICIALIZAR APP E DETERMINAR ROTA INICIAL
  static Future<void> initializeAndNavigate() async {
    try {
      print('üöÄ Inicializando aplica√ß√£o...');
      
      // 1. Aguardar um pouco para garantir que tudo est√° carregado
      await Future.delayed(const Duration(milliseconds: 2000));
      
      // 2. Verificar se usu√°rio est√° logado
      final user = FirebaseAuth.instance.currentUser;
      
      if (user != null) {
        print('üë§ Usu√°rio logado: ${user.email}');
        
        // 3. Inicializar sess√£o do usu√°rio
        await UserSessionManager.initializeUserSession(user.uid);
        
        // 4. Navegar para home
        Get.offAllNamed(AppRoutes.home);
      } else {
        print('üë§ Usu√°rio n√£o logado');
        
        // 5. Limpar qualquer sess√£o anterior
        await UserSessionManager.clearAllUserData();
        
        // 6. Navegar para welcome
        Get.offAllNamed(AppRoutes.welcome);
      }
      
    } catch (e) {
      print('‚ùå Erro na inicializa√ß√£o: $e');
      
      // Em caso de erro, ir para welcome
      try {
        await UserSessionManager.clearAllUserData();
      } catch (clearError) {
        print('‚ùå Erro ao limpar dados: $clearError');
      }
      
      Get.offAllNamed(AppRoutes.welcome);
    }
  }
  
  /// ‚úÖ VERIFICAR SE O APP FOI ABERTO VIA NOTIFICA√á√ÉO
  static Future<bool> wasOpenedFromNotification() async {
    try {
      // Esta verifica√ß√£o seria feita pelo NotificationService
      // Por enquanto, sempre false
      return false;
    } catch (e) {
      print('‚ùå Erro ao verificar abertura via notifica√ß√£o: $e');
      return false;
    }
  }
  
  /// ‚úÖ CONFIGURAR LISTENERS GLOBAIS
  static void setupGlobalListeners() {
    try {
      // Listener para mudan√ßas de autentica√ß√£o
      FirebaseAuth.instance.authStateChanges().listen((User? user) {
        _handleAuthStateChange(user);
      });
      
      print('üëÇ Listeners globais configurados');
    } catch (e) {
      print('‚ùå Erro ao configurar listeners: $e');
    }
  }
  
  /// ‚úÖ LIDAR COM MUDAN√áAS DE AUTENTICA√á√ÉO
  static void _handleAuthStateChange(User? user) async {
    try {
      if (user == null) {
        print('üë§ Usu√°rio deslogado');
        
        // Limpar sess√£o
        await UserSessionManager.clearAllUserData();
        
        // S√≥ navegar se n√£o estivermos em uma rota p√∫blica
        if (!_isOnPublicRoute()) {
          Get.offAllNamed(AppRoutes.welcome);
        }
      } else {
        print('üë§ Usu√°rio logado: ${user.email}');
        
        // Inicializar sess√£o
        await UserSessionManager.initializeUserSession(user.uid);
        
        // S√≥ navegar se n√£o estivermos na home
        if (Get.currentRoute != AppRoutes.home && !_isOnPublicRoute()) {
          Get.offAllNamed(AppRoutes.home);
        }
      }
    } catch (e) {
      print('‚ùå Erro ao lidar com mudan√ßa de autentica√ß√£o: $e');
    }
  }
  
  /// ‚úÖ VERIFICAR SE ESTAMOS EM UMA ROTA P√öBLICA
  static bool _isOnPublicRoute() {
    final publicRoutes = [
      AppRoutes.splash,
      AppRoutes.onboarding,
      AppRoutes.welcome,
      AppRoutes.login,
      AppRoutes.signup,
      AppRoutes.resetPassword,
    ];
    
    return publicRoutes.contains(Get.currentRoute);
  }
  
  /// ‚úÖ INICIALIZA√á√ÉO ESPEC√çFICA PARA USU√ÅRIO LOGADO
  static Future<void> initializeForLoggedUser(String userId) async {
    try {
      print('üë§ Inicializando para usu√°rio logado: $userId');
      
      // Inicializar sess√£o
      await UserSessionManager.initializeUserSession(userId);
      
      // Aqui poder√≠amos inicializar outros servi√ßos espec√≠ficos do usu√°rio
      // Como notifica√ß√µes, sincroniza√ß√£o, etc.
      
      print('‚úÖ Inicializa√ß√£o para usu√°rio conclu√≠da');
    } catch (e) {
      print('‚ùå Erro na inicializa√ß√£o para usu√°rio: $e');
      rethrow;
    }
  }
  
  /// ‚úÖ LIMPAR DADOS DO USU√ÅRIO AO FAZER LOGOUT
  static Future<void> cleanupOnLogout() async {
    try {
      print('üßπ Limpando dados no logout...');
      
      // Limpar sess√£o
      await UserSessionManager.clearAllUserData();
      
      // Aqui poder√≠amos limpar outros dados/servi√ßos
      // Como cache, notifica√ß√µes locais, etc.
      
      print('‚úÖ Limpeza no logout conclu√≠da');
    } catch (e) {
      print('‚ùå Erro na limpeza do logout: $e');
    }
  }
  
  /// ‚úÖ VERIFICAR SA√öDE DA APLICA√á√ÉO
  static bool checkAppHealth() {
    try {
      // Verificar se o Firebase est√° funcionando
      final user = FirebaseAuth.instance.currentUser;
      
      // Verificar se o GetX est√° funcionando
      final routeIsValid = Get.currentRoute.isNotEmpty;
      
      // Verificar se a sess√£o est√° consistente (se h√° usu√°rio)
      bool sessionIsHealthy = true;
      if (user != null) {
        sessionIsHealthy = UserSessionManager.isSessionConsistent();
      }
      
      final isHealthy = routeIsValid && sessionIsHealthy;
      
      print('üè• Sa√∫de da app: $isHealthy');
      print('   Rota v√°lida: $routeIsValid');
      print('   Sess√£o saud√°vel: $sessionIsHealthy');
      
      return isHealthy;
    } catch (e) {
      print('‚ùå Erro ao verificar sa√∫de da app: $e');
      return false;
    }
  }
  
  /// ‚úÖ REPARAR PROBLEMAS DA APLICA√á√ÉO
  static Future<void> repairAppIfNeeded() async {
    try {
      print('üîß Verificando se app precisa de reparo...');
      
      if (!checkAppHealth()) {
        print('‚ö†Ô∏è App n√£o est√° saud√°vel, tentando reparar...');
        
        // Reparar sess√£o se necess√°rio
        await UserSessionManager.repairSessionIfNeeded();
        
        // Reparar navega√ß√£o se necess√°rio
        if (Get.currentRoute.isEmpty) {
          await initializeAndNavigate();
        }
        
        print('‚úÖ Tentativa de reparo conclu√≠da');
      } else {
        print('‚úÖ App est√° saud√°vel');
      }
    } catch (e) {
      print('‚ùå Erro no reparo da app: $e');
    }
  }
  
  /// ‚úÖ INFORMA√á√ïES DE DEBUG
  static Map<String, dynamic> getDebugInfo() {
    final user = FirebaseAuth.instance.currentUser;
    
    return {
      'currentRoute': Get.currentRoute,
      'isOnPublicRoute': _isOnPublicRoute(),
      'hasFirebaseUser': user != null,
      'firebaseUserId': user?.uid,
      'firebaseUserEmail': user?.email,
      'sessionInfo': UserSessionManager.getSessionDebugInfo(),
      'appIsHealthy': checkAppHealth(),
      'timestamp': DateTime.now().toIso8601String(),
    };
  }
  
  /// ‚úÖ INICIALIZA√á√ÉO COMPLETA COM VERIFICA√á√ïES
  static Future<void> completeInitialization() async {
    try {
      print('üîÑ Inicializa√ß√£o completa...');
      
      // 1. Configurar listeners globais
      setupGlobalListeners();
      
      // 2. Verificar e reparar se necess√°rio
      await repairAppIfNeeded();
      
      // 3. Inicializar e navegar
      await initializeAndNavigate();
      
      print('‚úÖ Inicializa√ß√£o completa conclu√≠da');
    } catch (e) {
      print('‚ùå Erro na inicializa√ß√£o completa: $e');
      
      // Fallback para rota segura
      Get.offAllNamed(AppRoutes.welcome);
    }
  }
}