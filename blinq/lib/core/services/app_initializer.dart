// lib/core/services/app_initializer.dart

import 'package:firebase_auth/firebase_auth.dart';
import 'package:get/get.dart';
import '../../routes/app_routes.dart';
import 'notification_service.dart';

class AppInitializer {
  
  /// Inicializar app e determinar rota inicial
  static Future<void> initializeAndNavigate() async {
    try {
      print('üöÄ Inicializando aplica√ß√£o...');
      
      // 1. Aguardar um pouco para garantir que tudo est√° carregado
      await Future.delayed(const Duration(milliseconds: 2000));
      
      // 2. Verificar mensagem inicial de notifica√ß√£o
      await NotificationService.checkForInitialMessage();
      
      // 3. Verificar se usu√°rio est√° logado
      final user = FirebaseAuth.instance.currentUser;
      
      if (user != null) {
        print('üë§ Usu√°rio logado: ${user.email}');
        // Verificar se precisa configurar PIN
        // TODO: Implementar verifica√ß√£o de PIN configurado
        Get.offAllNamed(AppRoutes.home);
      } else {
        print('üë§ Usu√°rio n√£o logado');
        Get.offAllNamed(AppRoutes.welcome);
      }
      
    } catch (e) {
      print('‚ùå Erro na inicializa√ß√£o: $e');
      // Em caso de erro, ir para welcome
      Get.offAllNamed(AppRoutes.welcome);
    }
  }
  
  /// Verificar se o app foi aberto via notifica√ß√£o
  static Future<bool> wasOpenedFromNotification() async {
    try {
      // Esta verifica√ß√£o seria feita pelo NotificationService
      return false; // Por enquanto, sempre false
    } catch (e) {
      print('‚ùå Erro ao verificar abertura via notifica√ß√£o: $e');
      return false;
    }
  }
  
  /// Configurar listeners globais
  static void setupGlobalListeners() {
    // Listener para mudan√ßas de autentica√ß√£o
    FirebaseAuth.instance.authStateChanges().listen((User? user) {
      if (user == null) {
        print('üë§ Usu√°rio deslogado');
        Get.offAllNamed(AppRoutes.welcome);
      } else {
        print('üë§ Usu√°rio logado: ${user.email}');
        // N√£o navegar automaticamente para evitar loops
      }
    });
  }
}